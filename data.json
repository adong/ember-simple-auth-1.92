{
    "project": {
        "name": "The Ember Simple Auth API",
        "version": "1.9.2"
    },
    "files": {
        "addon/authenticators/base.js": {
            "name": "addon/authenticators/base.js",
            "modules": {
                "ember-simple-auth/authenticators/base": 1
            },
            "classes": {
                "BaseAuthenticator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/authenticators/devise.js": {
            "name": "addon/authenticators/devise.js",
            "modules": {
                "ember-simple-auth/authenticators/devise": 1
            },
            "classes": {
                "DeviseAuthenticator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/authenticators/oauth2-implicit-grant.js": {
            "name": "addon/authenticators/oauth2-implicit-grant.js",
            "modules": {
                "ember-simple-auth/authenticators/oauth2-implicit-grant": 1
            },
            "classes": {
                "OAuth2ImplicitGrantAuthenticator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/authenticators/oauth2-password-grant.js": {
            "name": "addon/authenticators/oauth2-password-grant.js",
            "modules": {
                "ember-simple-auth/authenticators/oauth2-password-grant": 1
            },
            "classes": {
                "OAuth2PasswordGrantAuthenticator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/authenticators/torii.js": {
            "name": "addon/authenticators/torii.js",
            "modules": {
                "ember-simple-auth/authenticators/torii": 1
            },
            "classes": {
                "ToriiAuthenticator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/authorizers/base.js": {
            "name": "addon/authorizers/base.js",
            "modules": {
                "ember-simple-auth/authorizers/base": 1
            },
            "classes": {
                "BaseAuthorizer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/authorizers/devise.js": {
            "name": "addon/authorizers/devise.js",
            "modules": {
                "ember-simple-auth/authorizers/devise": 1
            },
            "classes": {
                "DeviseAuthorizer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/authorizers/oauth2-bearer.js": {
            "name": "addon/authorizers/oauth2-bearer.js",
            "modules": {
                "ember-simple-auth/authorizers/oauth2-bearer": 1
            },
            "classes": {
                "OAuth2BearerAuthorizer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/mixins/application-route-mixin.js": {
            "name": "addon/mixins/application-route-mixin.js",
            "modules": {
                "ember-simple-auth/mixins/application-route-mixin": 1
            },
            "classes": {
                "ApplicationRouteMixin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/mixins/authenticated-route-mixin.js": {
            "name": "addon/mixins/authenticated-route-mixin.js",
            "modules": {
                "ember-simple-auth/mixins/authenticated-route-mixin": 1
            },
            "classes": {
                "AuthenticatedRouteMixin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/mixins/data-adapter-mixin.js": {
            "name": "addon/mixins/data-adapter-mixin.js",
            "modules": {
                "ember-simple-auth/mixins/data-adapter-mixin": 1
            },
            "classes": {
                "DataAdapterMixin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/mixins/oauth2-implicit-grant-callback-route-mixin.js": {
            "name": "addon/mixins/oauth2-implicit-grant-callback-route-mixin.js",
            "modules": {
                "ember-simple-auth/mixins/oauth2-implicit-grant-callback-route-mixin": 1
            },
            "classes": {
                "OAuth2ImplicitGrantCallbackRouteMixin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/mixins/unauthenticated-route-mixin.js": {
            "name": "addon/mixins/unauthenticated-route-mixin.js",
            "modules": {
                "ember-simple-auth/mixins/unauthenticated-route-mixin": 1
            },
            "classes": {
                "UnauthenticatedRouteMixin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/services/session.js": {
            "name": "addon/services/session.js",
            "modules": {
                "ember-simple-auth/services/session": 1
            },
            "classes": {
                "SessionService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/session-stores/adaptive.js": {
            "name": "addon/session-stores/adaptive.js",
            "modules": {
                "ember-simple-auth/session-stores/adaptive": 1
            },
            "classes": {
                "AdaptiveStore": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/session-stores/base.js": {
            "name": "addon/session-stores/base.js",
            "modules": {
                "ember-simple-auth/session-stores/base": 1
            },
            "classes": {
                "BaseStore": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/session-stores/cookie.js": {
            "name": "addon/session-stores/cookie.js",
            "modules": {
                "ember-simple-auth/session-stores/cookie": 1
            },
            "classes": {
                "CookieStore": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/session-stores/ephemeral.js": {
            "name": "addon/session-stores/ephemeral.js",
            "modules": {
                "ember-simple-auth/session-stores/ephemeral": 1
            },
            "classes": {
                "EphemeralStore": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/session-stores/local-storage.js": {
            "name": "addon/session-stores/local-storage.js",
            "modules": {
                "ember-simple-auth/session-stores/local-storage": 1
            },
            "classes": {
                "LocalStorageStore": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/session-stores/session-storage.js": {
            "name": "addon/session-stores/session-storage.js",
            "modules": {
                "ember-simple-auth/session-stores/session-storage": 1
            },
            "classes": {
                "SessionStorageStore": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "addon/utils/is-fastboot.js": {
            "name": "addon/utils/is-fastboot.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "addon/configuration.js": {
            "name": "addon/configuration.js",
            "modules": {
                "ember-simple-auth/configuration": 1
            },
            "classes": {
                "Configuration": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "ember-simple-auth/authenticators/base": {
            "name": "ember-simple-auth/authenticators/base",
            "submodules": {},
            "elements": {},
            "classes": {
                "BaseAuthenticator": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/authenticators/base.js",
            "line": 5,
            "description": "The base class for all authenticators. __This serves as a starting point for\nimplementing custom authenticators and must not be used directly.__\n\nThe authenticator authenticates the session. The actual mechanism used to do\nthis might, e.g., post a set of credentials to a server and in exchange\nretrieve an access token, initiating authentication against an external\nprovider like Facebook, etc. The details depend on the specific authenticator.\nUpon successful authentication, any data that the authenticator receives and\nresolves via the promise returned from the\n{{#crossLink \"BaseAuthenticator/authenticate:method\"}}{{/crossLink}}\nmethod is stored in the session and can be accessed via the session service\nto be used by the authorizer (see\n{{#crossLink \"BaseAuthorizer/authorize:method\"}}{{/crossLink}}) to e.g.,\nauthorize outgoing requests.\n\nThe authenticator also decides whether a set of data that was restored from\nthe session store (see\n{{#crossLink \"BaseStore/restore:method\"}}{{/crossLink}}) makes up an\nauthenticated session or not.\n\n__Authenticators for an application are defined in the `app/authenticators`\ndirectory__, e.g.:\n\n```js\n// app/authenticators/oauth2.js\nimport OAuth2PasswordGrantAuthenticator from 'ember-simple-auth/authenticators/oauth2-password-grant';\n\nexport default OAuth2PasswordGrantAuthenticator.extend({\n  ...\n});\n```\n\nand can then be used via the name Ember CLI automatically registers for them\nwithin the Ember container.\n\n```js\n// app/components/login-form.js\nexport default Ember.Controller.extend({\n  session: Ember.inject.service(),\n\n  actions: {\n    authenticate: function() {\n      this.get('session').authenticate('authenticator:oauth2');\n    }\n  }\n});\n```"
        },
        "ember-simple-auth/authenticators/devise": {
            "name": "ember-simple-auth/authenticators/devise",
            "submodules": {},
            "elements": {},
            "classes": {
                "DeviseAuthenticator": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/authenticators/devise.js",
            "line": 13,
            "description": "Authenticator that works with the Ruby gem\n[devise](https://github.com/plataformatec/devise).\n\n__As token authentication is not actually part of devise anymore, the server\nneeds to implement some customizations__ to work with this authenticator -\nsee [this gist](https://gist.github.com/josevalim/fb706b1e933ef01e4fb6)."
        },
        "ember-simple-auth/authenticators/oauth2-implicit-grant": {
            "name": "ember-simple-auth/authenticators/oauth2-implicit-grant",
            "submodules": {},
            "elements": {},
            "classes": {
                "OAuth2ImplicitGrantAuthenticator": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/authenticators/oauth2-implicit-grant.js",
            "line": 5,
            "description": "Authenticator that conforms to OAuth 2\n([RFC 6749](http://tools.ietf.org/html/rfc6749)), specifically the _\"Implicit\nGrant Type\"_.\n\nUse {{#crossLink \"OAuth2ImplicitGrantCallbackMixin\"}}{{/crossLink}} in your\nOAuth 2.0 redirect route to parse authentication parameters from location\nhash string into an object."
        },
        "ember-simple-auth/authenticators/oauth2-password-grant": {
            "name": "ember-simple-auth/authenticators/oauth2-password-grant",
            "submodules": {},
            "elements": {},
            "classes": {
                "OAuth2PasswordGrantAuthenticator": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/authenticators/oauth2-password-grant.js",
            "line": 20,
            "description": "Authenticator that conforms to OAuth 2\n([RFC 6749](http://tools.ietf.org/html/rfc6749)), specifically the _\"Resource\nOwner Password Credentials Grant Type\"_.\n\nThis authenticator also automatically refreshes access tokens (see\n[RFC 6749, section 6](http://tools.ietf.org/html/rfc6749#section-6)) if the\nserver supports it."
        },
        "ember-simple-auth/authenticators/torii": {
            "name": "ember-simple-auth/authenticators/torii",
            "submodules": {},
            "elements": {},
            "classes": {
                "ToriiAuthenticator": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/authenticators/torii.js",
            "line": 7,
            "description": "Authenticator that wraps the\n[Torii library](https://github.com/Vestorly/torii) and thus allows to connect\nany external authentication provider that torii defines a provider for.\n\nIn order to use this authenticator, __the application needs to have the\n[torii addon](https://github.com/Vestorly/torii) installed and must inject\nthe torii service into the authenticator__:\n\n```js\n// app/authenticators/torii.js\nimport ToriiAuthenticator from 'ember-simple-auth/authenticators/torii';\n\nexport default ToriiAuthenticator.extend({\n  torii: Ember.inject.service()\n});\n```"
        },
        "ember-simple-auth/authorizers/base": {
            "name": "ember-simple-auth/authorizers/base",
            "submodules": {},
            "elements": {},
            "classes": {
                "BaseAuthorizer": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/authorizers/base.js",
            "line": 4,
            "description": "The base class for all authorizers. __This serves as a starting point for\nimplementing custom authorizers and must not be used directly.__\n\nAuthorizers use the session data acquired by an authenticator when\nauthenticating the session to construct authorization data that can, e.g., be\ninjected into outgoing network requests. Depending on the authorization\nmechanism the authorizer implements, that authorization data might be an HTTP\nheader, query string parameters, a cookie, etc.\n\n__The authorizer has to fit the authenticator__ (see\n{{#crossLink \"BaseAuthenticator\"}}{{/crossLink}})\nas it can only use data that the authenticator acquires when authenticating\nthe session."
        },
        "ember-simple-auth/authorizers/devise": {
            "name": "ember-simple-auth/authorizers/devise",
            "submodules": {},
            "elements": {},
            "classes": {
                "DeviseAuthorizer": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/authorizers/devise.js",
            "line": 4,
            "description": "Authorizer that works with the Ruby gem\n[devise](https://github.com/plataformatec/devise); includes the user's token\nand identification from the session data in the `Authorization` HTTP header,\ne.g.,\n\n```\nAuthorization: token=\"234rtgjneroigne4\" email=\"user@domain.tld\"\n```\n\n__As token authentication is not actually part of devise anymore, the server\nneeds to implement some customizations__ to work with this authenticator -\nsee [this gist](https://gist.github.com/josevalim/fb706b1e933ef01e4fb6)."
        },
        "ember-simple-auth/authorizers/oauth2-bearer": {
            "name": "ember-simple-auth/authorizers/oauth2-bearer",
            "submodules": {},
            "elements": {},
            "classes": {
                "OAuth2BearerAuthorizer": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/authorizers/oauth2-bearer.js",
            "line": 4,
            "description": "Authorizer that conforms to OAuth 2\n([RFC 6749](http://tools.ietf.org/html/rfc6749)); includes the access token\nfrom the session data as a bearer token\n([RFC 6750](http://tools.ietf.org/html/rfc6750)) in the `Authorization`\nheader, e.g.:\n\n```\nAuthorization: Bearer 234rtgjneroigne4\n```"
        },
        "ember-simple-auth/mixins/application-route-mixin": {
            "name": "ember-simple-auth/mixins/application-route-mixin",
            "submodules": {},
            "elements": {},
            "classes": {
                "ApplicationRouteMixin": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/mixins/application-route-mixin.js",
            "line": 10,
            "description": "The mixin for the application route, __defining methods that are called when\nthe session is successfully authenticated (see\n{{#crossLink \"SessionService/authenticationSucceeded:event\"}}{{/crossLink}})\nor invalidated__ (see\n{{#crossLink \"SessionService/invalidationSucceeded:event\"}}{{/crossLink}}).\n\n__Using this mixin is optional.__ The session events can also be handled\nmanually, e.g. in an instance initializer:\n\n```js\n// app/instance-initializers/session-events.js\nexport function initialize(instance) {\n  const applicationRoute = instance.container.lookup('route:application');\n  const session          = instance.container.lookup('service:session');\n  session.on('authenticationSucceeded', function() {\n    applicationRoute.transitionTo('index');\n  });\n  session.on('invalidationSucceeded', function() {\n    applicationRoute.transitionTo('bye');\n  });\n};\n\nexport default {\n  initialize,\n  name:  'session-events',\n  after: 'ember-simple-auth'\n};\n```\n\n__When using the `ApplicationRouteMixin` you need to specify\n`needs: ['service:session']` in the application route's unit test.__"
        },
        "ember-simple-auth/mixins/authenticated-route-mixin": {
            "name": "ember-simple-auth/mixins/authenticated-route-mixin",
            "submodules": {},
            "elements": {},
            "classes": {
                "AuthenticatedRouteMixin": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/mixins/authenticated-route-mixin.js",
            "line": 35,
            "description": "__This mixin is used to make routes accessible only if the session is\nauthenticated.__ It defines a `beforeModel` method that aborts the current\ntransition and instead transitions to the\n{{#crossLink \"Configuration/authenticationRoute:property\"}}{{/crossLink}} if\nthe session is not authenticated.\n\n```js\n// app/routes/protected.js\nimport AuthenticatedRouteMixin from 'ember-simple-auth/mixins/authenticated-route-mixin';\n\nexport default Ember.Route.extend(AuthenticatedRouteMixin);\n```"
        },
        "ember-simple-auth/mixins/data-adapter-mixin": {
            "name": "ember-simple-auth/mixins/data-adapter-mixin",
            "submodules": {},
            "elements": {},
            "classes": {
                "DataAdapterMixin": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/mixins/data-adapter-mixin.js",
            "line": 6,
            "description": "__This mixin can be used to make Ember Data adapters authorize all outgoing\nAPI requests by injecting a header.__ It works with all authorizers that call\nthe authorization callback (see\n{{#crossLink \"BaseAuthorizer/authorize:method\"}}{{/crossLink}}) with header\nname and header content arguments.\n\n__The `DataAdapterMixin` will also invalidate the session whenever it\nreceives a 401 response for an API request.__\n\n```js\n// app/adapters/application.js\nimport DS from 'ember-data';\nimport DataAdapterMixin from 'ember-simple-auth/mixins/data-adapter-mixin';\n\nexport default DS.JSONAPIAdapter.extend(DataAdapterMixin, {\n  authorizer: 'authorizer:application'\n});\n```\n\n__The `DataAdapterMixin` requires Ember Data 1.13 or later.__"
        },
        "ember-simple-auth/mixins/oauth2-implicit-grant-callback-route-mixin": {
            "name": "ember-simple-auth/mixins/oauth2-implicit-grant-callback-route-mixin",
            "submodules": {},
            "elements": {},
            "classes": {
                "OAuth2ImplicitGrantCallbackRouteMixin": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/mixins/oauth2-implicit-grant-callback-route-mixin.js",
            "line": 20,
            "description": "__This mixin is used in the callback route when using OAuth 2.0 Implicit\nGrant authentication.__ It implements the\n{{#crossLink \"OAuth2ImplicitGrantCallbackRouteMixin/activate:method\"}}{{/crossLink}}\nmethod that retrieves and processes authentication parameters, such as\n`access_token`, from the hash parameters provided in the callback URL by\nthe authentication server. The parameters are then passed to the\n{{#crossLink \"OAuth2ImplicitGrantAuthenticator\"}}{{/crossLink}}"
        },
        "ember-simple-auth/mixins/unauthenticated-route-mixin": {
            "name": "ember-simple-auth/mixins/unauthenticated-route-mixin",
            "submodules": {},
            "elements": {},
            "classes": {
                "UnauthenticatedRouteMixin": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/mixins/unauthenticated-route-mixin.js",
            "line": 22,
            "description": "__This mixin is used to make routes accessible only if the session is\nnot authenticated__ (e.g., login and registration routes). It defines a\n`beforeModel` method that aborts the current transition and instead\ntransitions to the\n{{#crossLink \"Configuration/routeIfAlreadyAuthenticated:property\"}}{{/crossLink}}\nif the session is authenticated.\n\n```js\n// app/routes/login.js\nimport UnauthenticatedRouteMixin from 'ember-simple-auth/mixins/unauthenticated-route-mixin';\n\nexport default Ember.Route.extend(UnauthenticatedRouteMixin);\n```"
        },
        "ember-simple-auth/services/session": {
            "name": "ember-simple-auth/services/session",
            "submodules": {},
            "elements": {},
            "classes": {
                "SessionService": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/services/session.js",
            "line": 12,
            "description": "__The session service provides access to the current session as well as\nmethods to authenticate it, invalidate it, etc.__ It is the main interface for\nthe application to Ember Simple Auth's functionality. It can be injected via\n\n```js\n// app/components/login-form.js\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  session: Ember.inject.service('session')\n});\n```"
        },
        "ember-simple-auth/session-stores/adaptive": {
            "name": "ember-simple-auth/session-stores/adaptive",
            "submodules": {},
            "elements": {},
            "classes": {
                "AdaptiveStore": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/session-stores/adaptive.js",
            "line": 27,
            "description": "Session store that persists data in the browser's `localStorage` (see\n{{#crossLink \"LocalStorageStore\"}}{{/crossLink}}) if that is available or in\na cookie (see {{#crossLink \"CookieStore\"}}{{/crossLink}}) if it is not.\n\n__This is the default store that Ember Simple Auth will use when the\napplication doesn't define a custom store.__\n\n__This session store does not work with FastBoot. In order to use Ember\nSimple Auth with FastBoot, configure the\n{{#crossLink \"CookieStore\"}}{{/crossLink}} as the application's session\nstore.__"
        },
        "ember-simple-auth/session-stores/base": {
            "name": "ember-simple-auth/session-stores/base",
            "submodules": {},
            "elements": {},
            "classes": {
                "BaseStore": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/session-stores/base.js",
            "line": 5,
            "description": "The base class for all session stores. __This serves as a starting point for\nimplementing custom session stores and must not be used directly.__\n\nSession Stores persist the session's state so that it survives a page reload\nand is synchronized across multiple tabs or windows of the same application."
        },
        "ember-simple-auth/session-stores/cookie": {
            "name": "ember-simple-auth/session-stores/cookie",
            "submodules": {},
            "elements": {},
            "classes": {
                "CookieStore": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/session-stores/cookie.js",
            "line": 27,
            "description": "Session store that persists data in a cookie.\n\nBy default the cookie session store uses a session cookie that expires and is\ndeleted when the browser is closed. The cookie expiration period can be\nconfigured by setting the\n{{#crossLink \"CookieStore/cookieExpirationTime:property\"}}{{/crossLink}}\nproperty. This can be used to implement \"remember me\" functionality that will\neither store the session persistently or in a session cookie depending on\nwhether the user opted in or not:\n\n```js\n// app/controllers/login.js\nexport default Ember.Controller.extend({\n  rememberMe: computed({\n    get(key) {\n      return false;\n    },\n    set(key, value) {\n      let expirationTime = value ? (14 * 24 * 60 * 60) : null;\n      this.set('session.store.cookieExpirationTime', expirationTime);\n      return value;\n    }\n  })\n});\n```\n\n__Applications that use FastBoot must use this session store by defining the\napplication session store like this:__\n\n```js\n// app/session-stores/application.js\nimport CookieStore from 'ember-simple-auth/session-stores/cookie';\n\nexport default CookieStore.extend();\n```"
        },
        "ember-simple-auth/session-stores/ephemeral": {
            "name": "ember-simple-auth/session-stores/ephemeral",
            "submodules": {},
            "elements": {},
            "classes": {
                "EphemeralStore": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/session-stores/ephemeral.js",
            "line": 4,
            "description": "Session store that __persists data in memory and thus is not actually\npersistent__. It does also not synchronize the session's state across\nmultiple tabs or windows as those cannot share memory. __This store is mainly\nuseful for testing and will automatically be used when running tests.__"
        },
        "ember-simple-auth/session-stores/local-storage": {
            "name": "ember-simple-auth/session-stores/local-storage",
            "submodules": {},
            "elements": {},
            "classes": {
                "LocalStorageStore": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/session-stores/local-storage.js",
            "line": 9,
            "description": "Session store that persists data in the browser's `localStorage`.\n\n__`localStorage` is not available in Safari when running in private mode. In\ngeneral it is better to use the\n{{#crossLink \"AdaptiveStore\"}}{{/crossLink}} that automatically falls back to\nthe {{#crossLink \"CookieStore\"}}{{/crossLink}} when `localStorage` is not\navailable.__\n\n__This session store does not work with FastBoot. In order to use Ember\nSimple Auth with FastBoot, configure the\n{{#crossLink \"CookieStore\"}}{{/crossLink}} as the application's session\nstore.__"
        },
        "ember-simple-auth/session-stores/session-storage": {
            "name": "ember-simple-auth/session-stores/session-storage",
            "submodules": {},
            "elements": {},
            "classes": {
                "SessionStorageStore": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/session-stores/session-storage.js",
            "line": 9,
            "description": "Session store that persists data in the browser's `sessionStorage`.\n\n__`sessionStorage` is not available in Safari when running in private mode.__\n\n__This session store does not work with FastBoot. In order to use Ember\nSimple Auth with FastBoot, configure the\n{{#crossLink \"CookieStore\"}}{{/crossLink}} as the application's session\nstore.__"
        },
        "ember-simple-auth/configuration": {
            "name": "ember-simple-auth/configuration",
            "submodules": {},
            "elements": {},
            "classes": {
                "Configuration": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "addon/configuration.js",
            "line": 12,
            "description": "Ember Simple Auth's configuration object."
        }
    },
    "classes": {
        "BaseAuthenticator": {
            "name": "BaseAuthenticator",
            "shortname": "BaseAuthenticator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/authenticators/base",
            "file": "addon/authenticators/base.js",
            "line": 5,
            "description": "The base class for all authenticators. __This serves as a starting point for\nimplementing custom authenticators and must not be used directly.__\n\nThe authenticator authenticates the session. The actual mechanism used to do\nthis might, e.g., post a set of credentials to a server and in exchange\nretrieve an access token, initiating authentication against an external\nprovider like Facebook, etc. The details depend on the specific authenticator.\nUpon successful authentication, any data that the authenticator receives and\nresolves via the promise returned from the\n{{#crossLink \"BaseAuthenticator/authenticate:method\"}}{{/crossLink}}\nmethod is stored in the session and can be accessed via the session service\nto be used by the authorizer (see\n{{#crossLink \"BaseAuthorizer/authorize:method\"}}{{/crossLink}}) to e.g.,\nauthorize outgoing requests.\n\nThe authenticator also decides whether a set of data that was restored from\nthe session store (see\n{{#crossLink \"BaseStore/restore:method\"}}{{/crossLink}}) makes up an\nauthenticated session or not.\n\n__Authenticators for an application are defined in the `app/authenticators`\ndirectory__, e.g.:\n\n```js\n// app/authenticators/oauth2.js\nimport OAuth2PasswordGrantAuthenticator from 'ember-simple-auth/authenticators/oauth2-password-grant';\n\nexport default OAuth2PasswordGrantAuthenticator.extend({\n  ...\n});\n```\n\nand can then be used via the name Ember CLI automatically registers for them\nwithin the Ember container.\n\n```js\n// app/components/login-form.js\nexport default Ember.Controller.extend({\n  session: Ember.inject.service(),\n\n  actions: {\n    authenticate: function() {\n      this.get('session').authenticate('authenticator:oauth2');\n    }\n  }\n});\n```",
            "extends": "Ember.Object",
            "uses": [
                "Ember.Evented"
            ],
            "access": "public",
            "tagname": ""
        },
        "DeviseAuthenticator": {
            "name": "DeviseAuthenticator",
            "shortname": "DeviseAuthenticator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/authenticators/devise",
            "namespace": "",
            "file": "addon/authenticators/devise.js",
            "line": 13,
            "description": "Authenticator that works with the Ruby gem\n[devise](https://github.com/plataformatec/devise).\n\n__As token authentication is not actually part of devise anymore, the server\nneeds to implement some customizations__ to work with this authenticator -\nsee [this gist](https://gist.github.com/josevalim/fb706b1e933ef01e4fb6).",
            "extends": "BaseAuthenticator",
            "access": "public",
            "tagname": ""
        },
        "OAuth2ImplicitGrantAuthenticator": {
            "name": "OAuth2ImplicitGrantAuthenticator",
            "shortname": "OAuth2ImplicitGrantAuthenticator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/authenticators/oauth2-implicit-grant",
            "namespace": "",
            "file": "addon/authenticators/oauth2-implicit-grant.js",
            "line": 5,
            "description": "Authenticator that conforms to OAuth 2\n([RFC 6749](http://tools.ietf.org/html/rfc6749)), specifically the _\"Implicit\nGrant Type\"_.\n\nUse {{#crossLink \"OAuth2ImplicitGrantCallbackMixin\"}}{{/crossLink}} in your\nOAuth 2.0 redirect route to parse authentication parameters from location\nhash string into an object.",
            "extends": "BaseAuthenticator",
            "access": "public",
            "tagname": ""
        },
        "OAuth2PasswordGrantAuthenticator": {
            "name": "OAuth2PasswordGrantAuthenticator",
            "shortname": "OAuth2PasswordGrantAuthenticator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/authenticators/oauth2-password-grant",
            "namespace": "",
            "file": "addon/authenticators/oauth2-password-grant.js",
            "line": 20,
            "description": "Authenticator that conforms to OAuth 2\n([RFC 6749](http://tools.ietf.org/html/rfc6749)), specifically the _\"Resource\nOwner Password Credentials Grant Type\"_.\n\nThis authenticator also automatically refreshes access tokens (see\n[RFC 6749, section 6](http://tools.ietf.org/html/rfc6749#section-6)) if the\nserver supports it.",
            "extends": "BaseAuthenticator",
            "access": "public",
            "tagname": ""
        },
        "ToriiAuthenticator": {
            "name": "ToriiAuthenticator",
            "shortname": "ToriiAuthenticator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/authenticators/torii",
            "namespace": "",
            "file": "addon/authenticators/torii.js",
            "line": 7,
            "description": "Authenticator that wraps the\n[Torii library](https://github.com/Vestorly/torii) and thus allows to connect\nany external authentication provider that torii defines a provider for.\n\nIn order to use this authenticator, __the application needs to have the\n[torii addon](https://github.com/Vestorly/torii) installed and must inject\nthe torii service into the authenticator__:\n\n```js\n// app/authenticators/torii.js\nimport ToriiAuthenticator from 'ember-simple-auth/authenticators/torii';\n\nexport default ToriiAuthenticator.extend({\n  torii: Ember.inject.service()\n});\n```",
            "extends": "BaseAuthenticator",
            "access": "public",
            "tagname": ""
        },
        "BaseAuthorizer": {
            "name": "BaseAuthorizer",
            "shortname": "BaseAuthorizer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/authorizers/base",
            "namespace": "",
            "file": "addon/authorizers/base.js",
            "line": 4,
            "description": "The base class for all authorizers. __This serves as a starting point for\nimplementing custom authorizers and must not be used directly.__\n\nAuthorizers use the session data acquired by an authenticator when\nauthenticating the session to construct authorization data that can, e.g., be\ninjected into outgoing network requests. Depending on the authorization\nmechanism the authorizer implements, that authorization data might be an HTTP\nheader, query string parameters, a cookie, etc.\n\n__The authorizer has to fit the authenticator__ (see\n{{#crossLink \"BaseAuthenticator\"}}{{/crossLink}})\nas it can only use data that the authenticator acquires when authenticating\nthe session.",
            "extends": "Ember.Object",
            "deprecated": true,
            "deprecationMessage": "BaseAuthorizer:class",
            "access": "public",
            "tagname": ""
        },
        "DeviseAuthorizer": {
            "name": "DeviseAuthorizer",
            "shortname": "DeviseAuthorizer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/authorizers/devise",
            "namespace": "",
            "file": "addon/authorizers/devise.js",
            "line": 4,
            "description": "Authorizer that works with the Ruby gem\n[devise](https://github.com/plataformatec/devise); includes the user's token\nand identification from the session data in the `Authorization` HTTP header,\ne.g.,\n\n```\nAuthorization: token=\"234rtgjneroigne4\" email=\"user@domain.tld\"\n```\n\n__As token authentication is not actually part of devise anymore, the server\nneeds to implement some customizations__ to work with this authenticator -\nsee [this gist](https://gist.github.com/josevalim/fb706b1e933ef01e4fb6).",
            "extends": "BaseAuthorizer",
            "access": "public",
            "tagname": ""
        },
        "OAuth2BearerAuthorizer": {
            "name": "OAuth2BearerAuthorizer",
            "shortname": "OAuth2BearerAuthorizer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/authorizers/oauth2-bearer",
            "namespace": "",
            "file": "addon/authorizers/oauth2-bearer.js",
            "line": 4,
            "description": "Authorizer that conforms to OAuth 2\n([RFC 6749](http://tools.ietf.org/html/rfc6749)); includes the access token\nfrom the session data as a bearer token\n([RFC 6750](http://tools.ietf.org/html/rfc6750)) in the `Authorization`\nheader, e.g.:\n\n```\nAuthorization: Bearer 234rtgjneroigne4\n```",
            "extends": "BaseAuthorizer",
            "access": "public",
            "tagname": ""
        },
        "ApplicationRouteMixin": {
            "name": "ApplicationRouteMixin",
            "shortname": "ApplicationRouteMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/mixins/application-route-mixin",
            "namespace": "",
            "file": "addon/mixins/application-route-mixin.js",
            "line": 10,
            "description": "The mixin for the application route, __defining methods that are called when\nthe session is successfully authenticated (see\n{{#crossLink \"SessionService/authenticationSucceeded:event\"}}{{/crossLink}})\nor invalidated__ (see\n{{#crossLink \"SessionService/invalidationSucceeded:event\"}}{{/crossLink}}).\n\n__Using this mixin is optional.__ The session events can also be handled\nmanually, e.g. in an instance initializer:\n\n```js\n// app/instance-initializers/session-events.js\nexport function initialize(instance) {\n  const applicationRoute = instance.container.lookup('route:application');\n  const session          = instance.container.lookup('service:session');\n  session.on('authenticationSucceeded', function() {\n    applicationRoute.transitionTo('index');\n  });\n  session.on('invalidationSucceeded', function() {\n    applicationRoute.transitionTo('bye');\n  });\n};\n\nexport default {\n  initialize,\n  name:  'session-events',\n  after: 'ember-simple-auth'\n};\n```\n\n__When using the `ApplicationRouteMixin` you need to specify\n`needs: ['service:session']` in the application route's unit test.__",
            "extends": "Ember.Mixin",
            "access": "public",
            "tagname": ""
        },
        "AuthenticatedRouteMixin": {
            "name": "AuthenticatedRouteMixin",
            "shortname": "AuthenticatedRouteMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/mixins/authenticated-route-mixin",
            "namespace": "",
            "file": "addon/mixins/authenticated-route-mixin.js",
            "line": 35,
            "description": "__This mixin is used to make routes accessible only if the session is\nauthenticated.__ It defines a `beforeModel` method that aborts the current\ntransition and instead transitions to the\n{{#crossLink \"Configuration/authenticationRoute:property\"}}{{/crossLink}} if\nthe session is not authenticated.\n\n```js\n// app/routes/protected.js\nimport AuthenticatedRouteMixin from 'ember-simple-auth/mixins/authenticated-route-mixin';\n\nexport default Ember.Route.extend(AuthenticatedRouteMixin);\n```",
            "extends": "Ember.Mixin",
            "access": "public",
            "tagname": ""
        },
        "DataAdapterMixin": {
            "name": "DataAdapterMixin",
            "shortname": "DataAdapterMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/mixins/data-adapter-mixin",
            "namespace": "",
            "file": "addon/mixins/data-adapter-mixin.js",
            "line": 6,
            "description": "__This mixin can be used to make Ember Data adapters authorize all outgoing\nAPI requests by injecting a header.__ It works with all authorizers that call\nthe authorization callback (see\n{{#crossLink \"BaseAuthorizer/authorize:method\"}}{{/crossLink}}) with header\nname and header content arguments.\n\n__The `DataAdapterMixin` will also invalidate the session whenever it\nreceives a 401 response for an API request.__\n\n```js\n// app/adapters/application.js\nimport DS from 'ember-data';\nimport DataAdapterMixin from 'ember-simple-auth/mixins/data-adapter-mixin';\n\nexport default DS.JSONAPIAdapter.extend(DataAdapterMixin, {\n  authorizer: 'authorizer:application'\n});\n```\n\n__The `DataAdapterMixin` requires Ember Data 1.13 or later.__",
            "extends": "Ember.Mixin",
            "access": "public",
            "tagname": ""
        },
        "OAuth2ImplicitGrantCallbackRouteMixin": {
            "name": "OAuth2ImplicitGrantCallbackRouteMixin",
            "shortname": "OAuth2ImplicitGrantCallbackRouteMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/mixins/oauth2-implicit-grant-callback-route-mixin",
            "namespace": "",
            "file": "addon/mixins/oauth2-implicit-grant-callback-route-mixin.js",
            "line": 20,
            "description": "__This mixin is used in the callback route when using OAuth 2.0 Implicit\nGrant authentication.__ It implements the\n{{#crossLink \"OAuth2ImplicitGrantCallbackRouteMixin/activate:method\"}}{{/crossLink}}\nmethod that retrieves and processes authentication parameters, such as\n`access_token`, from the hash parameters provided in the callback URL by\nthe authentication server. The parameters are then passed to the\n{{#crossLink \"OAuth2ImplicitGrantAuthenticator\"}}{{/crossLink}}",
            "extends": "Ember.Mixin",
            "access": "public",
            "tagname": ""
        },
        "UnauthenticatedRouteMixin": {
            "name": "UnauthenticatedRouteMixin",
            "shortname": "UnauthenticatedRouteMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/mixins/unauthenticated-route-mixin",
            "namespace": "",
            "file": "addon/mixins/unauthenticated-route-mixin.js",
            "line": 22,
            "description": "__This mixin is used to make routes accessible only if the session is\nnot authenticated__ (e.g., login and registration routes). It defines a\n`beforeModel` method that aborts the current transition and instead\ntransitions to the\n{{#crossLink \"Configuration/routeIfAlreadyAuthenticated:property\"}}{{/crossLink}}\nif the session is authenticated.\n\n```js\n// app/routes/login.js\nimport UnauthenticatedRouteMixin from 'ember-simple-auth/mixins/unauthenticated-route-mixin';\n\nexport default Ember.Route.extend(UnauthenticatedRouteMixin);\n```",
            "extends": "Ember.Mixin",
            "access": "public",
            "tagname": ""
        },
        "SessionService": {
            "name": "SessionService",
            "shortname": "SessionService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/services/session",
            "namespace": "",
            "file": "addon/services/session.js",
            "line": 12,
            "description": "__The session service provides access to the current session as well as\nmethods to authenticate it, invalidate it, etc.__ It is the main interface for\nthe application to Ember Simple Auth's functionality. It can be injected via\n\n```js\n// app/components/login-form.js\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  session: Ember.inject.service('session')\n});\n```",
            "extends": "Ember.Service",
            "uses": [
                "Ember.Evented"
            ],
            "access": "public",
            "tagname": ""
        },
        "AdaptiveStore": {
            "name": "AdaptiveStore",
            "shortname": "AdaptiveStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/session-stores/adaptive",
            "namespace": "",
            "file": "addon/session-stores/adaptive.js",
            "line": 27,
            "description": "Session store that persists data in the browser's `localStorage` (see\n{{#crossLink \"LocalStorageStore\"}}{{/crossLink}}) if that is available or in\na cookie (see {{#crossLink \"CookieStore\"}}{{/crossLink}}) if it is not.\n\n__This is the default store that Ember Simple Auth will use when the\napplication doesn't define a custom store.__\n\n__This session store does not work with FastBoot. In order to use Ember\nSimple Auth with FastBoot, configure the\n{{#crossLink \"CookieStore\"}}{{/crossLink}} as the application's session\nstore.__",
            "extends": "BaseStore",
            "access": "public",
            "tagname": ""
        },
        "BaseStore": {
            "name": "BaseStore",
            "shortname": "BaseStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/session-stores/base",
            "namespace": "",
            "file": "addon/session-stores/base.js",
            "line": 5,
            "description": "The base class for all session stores. __This serves as a starting point for\nimplementing custom session stores and must not be used directly.__\n\nSession Stores persist the session's state so that it survives a page reload\nand is synchronized across multiple tabs or windows of the same application.",
            "extends": "Ember.Object",
            "uses": [
                "Ember.Evented"
            ],
            "access": "public",
            "tagname": ""
        },
        "CookieStore": {
            "name": "CookieStore",
            "shortname": "CookieStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/session-stores/cookie",
            "namespace": "",
            "file": "addon/session-stores/cookie.js",
            "line": 27,
            "description": "Session store that persists data in a cookie.\n\nBy default the cookie session store uses a session cookie that expires and is\ndeleted when the browser is closed. The cookie expiration period can be\nconfigured by setting the\n{{#crossLink \"CookieStore/cookieExpirationTime:property\"}}{{/crossLink}}\nproperty. This can be used to implement \"remember me\" functionality that will\neither store the session persistently or in a session cookie depending on\nwhether the user opted in or not:\n\n```js\n// app/controllers/login.js\nexport default Ember.Controller.extend({\n  rememberMe: computed({\n    get(key) {\n      return false;\n    },\n    set(key, value) {\n      let expirationTime = value ? (14 * 24 * 60 * 60) : null;\n      this.set('session.store.cookieExpirationTime', expirationTime);\n      return value;\n    }\n  })\n});\n```\n\n__Applications that use FastBoot must use this session store by defining the\napplication session store like this:__\n\n```js\n// app/session-stores/application.js\nimport CookieStore from 'ember-simple-auth/session-stores/cookie';\n\nexport default CookieStore.extend();\n```",
            "extends": "BaseStore",
            "access": "public",
            "tagname": ""
        },
        "EphemeralStore": {
            "name": "EphemeralStore",
            "shortname": "EphemeralStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/session-stores/ephemeral",
            "namespace": "",
            "file": "addon/session-stores/ephemeral.js",
            "line": 4,
            "description": "Session store that __persists data in memory and thus is not actually\npersistent__. It does also not synchronize the session's state across\nmultiple tabs or windows as those cannot share memory. __This store is mainly\nuseful for testing and will automatically be used when running tests.__",
            "extends": "BaseStore",
            "access": "public",
            "tagname": ""
        },
        "LocalStorageStore": {
            "name": "LocalStorageStore",
            "shortname": "LocalStorageStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/session-stores/local-storage",
            "namespace": "",
            "file": "addon/session-stores/local-storage.js",
            "line": 9,
            "description": "Session store that persists data in the browser's `localStorage`.\n\n__`localStorage` is not available in Safari when running in private mode. In\ngeneral it is better to use the\n{{#crossLink \"AdaptiveStore\"}}{{/crossLink}} that automatically falls back to\nthe {{#crossLink \"CookieStore\"}}{{/crossLink}} when `localStorage` is not\navailable.__\n\n__This session store does not work with FastBoot. In order to use Ember\nSimple Auth with FastBoot, configure the\n{{#crossLink \"CookieStore\"}}{{/crossLink}} as the application's session\nstore.__",
            "extends": "BaseStore",
            "access": "public",
            "tagname": ""
        },
        "SessionStorageStore": {
            "name": "SessionStorageStore",
            "shortname": "SessionStorageStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/session-stores/session-storage",
            "namespace": "",
            "file": "addon/session-stores/session-storage.js",
            "line": 9,
            "description": "Session store that persists data in the browser's `sessionStorage`.\n\n__`sessionStorage` is not available in Safari when running in private mode.__\n\n__This session store does not work with FastBoot. In order to use Ember\nSimple Auth with FastBoot, configure the\n{{#crossLink \"CookieStore\"}}{{/crossLink}} as the application's session\nstore.__",
            "extends": "BaseStore",
            "access": "public",
            "tagname": ""
        },
        "Configuration": {
            "name": "Configuration",
            "shortname": "Configuration",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-simple-auth/configuration",
            "namespace": "",
            "file": "addon/configuration.js",
            "line": 12,
            "description": "Ember Simple Auth's configuration object.",
            "extends": "Object",
            "access": "public",
            "tagname": ""
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "addon/authenticators/base.js",
            "line": 61,
            "description": "__Triggered when the authentication data is updated by the authenticator\ndue to an external or scheduled event__. This might happen, e.g., if the\nauthenticator refreshes an expired token or an event is triggered from an\nexternal authentication provider that the authenticator uses. The session\nhandles that event, passes the updated data back to the authenticator's\n{{#crossLink \"BaseAuthenticator/restore:method\"}}{{/crossLink}}\nmethod and handles the result of that invocation accordingly.",
            "itemtype": "event",
            "name": "sessionDataUpdated",
            "params": [
                {
                    "name": "data",
                    "description": "The updated session data",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "BaseAuthenticator",
            "module": "ember-simple-auth/authenticators/base"
        },
        {
            "file": "addon/authenticators/base.js",
            "line": 75,
            "description": "__Triggered when the authentication data is invalidated by the authenticator\ndue to an external or scheduled event__. This might happen, e.g., if a token\nexpires or an event is triggered from an external authentication provider\nthat the authenticator uses. The session handles the event and will\ninvalidate itself when it is triggered.",
            "itemtype": "event",
            "name": "sessionDataInvalidated",
            "access": "public",
            "tagname": "",
            "class": "BaseAuthenticator",
            "module": "ember-simple-auth/authenticators/base"
        },
        {
            "file": "addon/authenticators/base.js",
            "line": 86,
            "description": "Restores the session from a session data object. __This method is invoked\nby the session either on application startup if session data is restored\nfrom the session store__ or when properties in the store change due to\nexternal events (e.g. in another tab) and the new session data needs to be\nvalidated for whether it constitutes an authenticated session.\n\n__This method returns a promise. A resolving promise results in the session\nbecoming or remaining authenticated.__ Any data the promise resolves with\nwill be saved in and accessible via the session service's\n`data.authenticated` property (see\n{{#crossLink \"SessionService/data:property\"}}{{/crossLink}}). A rejecting\npromise indicates that `data` does not constitute a valid session and will\nresult in the session being invalidated or remaining unauthenticated.\n\nThe `BaseAuthenticator`'s implementation always returns a rejecting\npromise. __This method must be overridden in subclasses.__",
            "itemtype": "method",
            "name": "restore",
            "params": [
                {
                    "name": "data",
                    "description": "The data to restore the session from",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that when it resolves results in the session becoming or remaining authenticated",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "BaseAuthenticator",
            "module": "ember-simple-auth/authenticators/base"
        },
        {
            "file": "addon/authenticators/base.js",
            "line": 113,
            "description": "Authenticates the session with the specified `args`. These options vary\ndepending on the actual authentication mechanism the authenticator\nimplements (e.g. a set of credentials or a Facebook account id etc.). __The\nsession will invoke this method in order to authenticate itself__ (see\n{{#crossLink \"SessionService/authenticate:method\"}}{{/crossLink}}).\n\n__This method returns a promise. A resolving promise will result in the\nsession becoming authenticated.__ Any data the promise resolves with will\nbe saved in and accessible via the session service's `data.authenticated`\nproperty (see {{#crossLink \"SessionService/data:property\"}}{{/crossLink}}).\nA rejecting promise indicates that authentication failed and will result in\nthe session remaining unauthenticated.\n\nThe `BaseAuthenticator`'s implementation always returns a rejecting promise\nand thus never authenticates the session. __This method must be overridden\nin subclasses__.",
            "itemtype": "method",
            "name": "authenticate",
            "params": [
                {
                    "name": "args",
                    "description": "The arguments that the authenticator requires to authenticate the session",
                    "type": "Any",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "A promise that when it resolves results in the session becoming authenticated",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "BaseAuthenticator",
            "module": "ember-simple-auth/authenticators/base"
        },
        {
            "file": "addon/authenticators/base.js",
            "line": 140,
            "description": "This method is invoked as a callback when the session is invalidated. While\nthe session will invalidate itself and clear all authenticated session data,\nit might be necessary for some authenticators to perform additional tasks\n(e.g. invalidating an access token on the server side).\n\n__This method returns a promise. A resolving promise will result in the\nsession becoming unauthenticated.__ A rejecting promise will result in\ninvalidation being intercepted and the session remaining authenticated.\n\nThe `BaseAuthenticator`'s implementation always returns a resolving promise\nand thus never intercepts session invalidation. __This method doesn't have\nto be overridden in custom authenticators__ if no actions need to be\nperformed on session invalidation.",
            "itemtype": "method",
            "name": "invalidate",
            "params": [
                {
                    "name": "data",
                    "description": "The current authenticated session data",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "additional arguments as required by the authenticator",
                    "type": "Array",
                    "multiple": true
                }
            ],
            "return": {
                "description": "A promise that when it resolves results in the session being invalidated",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "BaseAuthenticator",
            "module": "ember-simple-auth/authenticators/base"
        },
        {
            "file": "addon/authenticators/devise.js",
            "line": 27,
            "description": "The endpoint on the server that the authentication request is sent to.",
            "itemtype": "property",
            "name": "serverTokenEndpoint",
            "type": "String",
            "default": "'/users/sign_in'",
            "access": "public",
            "tagname": "",
            "class": "DeviseAuthenticator",
            "module": "ember-simple-auth/authenticators/devise"
        },
        {
            "file": "addon/authenticators/devise.js",
            "line": 37,
            "description": "The devise resource name. __This will be used in the request and also be\nexpected in the server's response.__",
            "itemtype": "property",
            "name": "resourceName",
            "type": "String",
            "default": "'user'",
            "access": "public",
            "tagname": "",
            "class": "DeviseAuthenticator",
            "module": "ember-simple-auth/authenticators/devise"
        },
        {
            "file": "addon/authenticators/devise.js",
            "line": 48,
            "description": "The token attribute name. __This will be used in the request and also be\nexpected in the server's response.__",
            "itemtype": "property",
            "name": "tokenAttributeName",
            "type": "String",
            "default": "'token'",
            "access": "public",
            "tagname": "",
            "class": "DeviseAuthenticator",
            "module": "ember-simple-auth/authenticators/devise"
        },
        {
            "file": "addon/authenticators/devise.js",
            "line": 59,
            "description": "The identification attribute name. __This will be used in the request and\nalso be expected in the server's response.__",
            "itemtype": "property",
            "name": "identificationAttributeName",
            "type": "String",
            "default": "'email'",
            "access": "public",
            "tagname": "",
            "class": "DeviseAuthenticator",
            "module": "ember-simple-auth/authenticators/devise"
        },
        {
            "file": "addon/authenticators/devise.js",
            "line": 70,
            "description": "When authentication fails, the rejection callback is provided with the whole\nFetch API [Response](https://fetch.spec.whatwg.org/#response-class) object\ninstead of its responseJSON or responseText.\n\nThis is useful for cases when the backend provides additional context not\navailable in the response body.",
            "itemtype": "property",
            "name": "rejectWithXhr",
            "type": "Boolean",
            "default": "false",
            "deprecated": true,
            "deprecationMessage": "DeviseAuthenticator/rejectWithResponse:property",
            "access": "public",
            "tagname": "",
            "class": "DeviseAuthenticator",
            "module": "ember-simple-auth/authenticators/devise"
        },
        {
            "file": "addon/authenticators/devise.js",
            "line": 89,
            "description": "When authentication fails, the rejection callback is provided with the whole\nFetch API [Response](https://fetch.spec.whatwg.org/#response-class) object\ninstead of its responseJSON or responseText.\n\nThis is useful for cases when the backend provides additional context not\navailable in the response body.",
            "itemtype": "property",
            "name": "rejectWithResponse",
            "type": "Boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "DeviseAuthenticator",
            "module": "ember-simple-auth/authenticators/devise"
        },
        {
            "file": "addon/authenticators/devise.js",
            "line": 104,
            "description": "Restores the session from a session data object; __returns a resolving\npromise when there are non-empty\n{{#crossLink \"DeviseAuthenticator/tokenAttributeName:property\"}}token{{/crossLink}}\nand\n{{#crossLink \"DeviseAuthenticator/identificationAttributeName:property\"}}identification{{/crossLink}}\nvalues in `data`__ and a rejecting promise otherwise.",
            "itemtype": "method",
            "name": "restore",
            "params": [
                {
                    "name": "data",
                    "description": "The data to restore the session from",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that when it resolves results in the session becoming or remaining authenticated",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "DeviseAuthenticator",
            "module": "ember-simple-auth/authenticators/devise"
        },
        {
            "file": "addon/authenticators/devise.js",
            "line": 122,
            "description": "Authenticates the session with the specified `identification` and\n`password`; the credentials are `POST`ed to the\n{{#crossLink \"DeviseAuthenticator/serverTokenEndpoint:property\"}}server{{/crossLink}}.\nIf the credentials are valid the server will responds with a\n{{#crossLink \"DeviseAuthenticator/tokenAttributeName:property\"}}token{{/crossLink}}\nand\n{{#crossLink \"DeviseAuthenticator/identificationAttributeName:property\"}}identification{{/crossLink}}.\n__If the credentials are valid and authentication succeeds, a promise that\nresolves with the server's response is returned__, otherwise a promise that\nrejects with the server error is returned.",
            "itemtype": "method",
            "name": "authenticate",
            "params": [
                {
                    "name": "identification",
                    "description": "The user's identification",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "The user's password",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise that when it resolves results in the session becoming authenticated",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "DeviseAuthenticator",
            "module": "ember-simple-auth/authenticators/devise"
        },
        {
            "file": "addon/authenticators/devise.js",
            "line": 170,
            "description": "Does nothing",
            "itemtype": "method",
            "name": "invalidate",
            "return": {
                "description": "A resolving promise",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "DeviseAuthenticator",
            "module": "ember-simple-auth/authenticators/devise"
        },
        {
            "file": "addon/authenticators/devise.js",
            "line": 181,
            "description": "Makes a request to the Devise server using\n[ember-fetch](https://github.com/stefanpenner/ember-fetch).",
            "itemtype": "method",
            "name": "makeRequest",
            "params": [
                {
                    "name": "data",
                    "description": "The request data",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "request options that are passed to `fetch`",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The promise returned by `fetch`",
                "type": "Promise"
            },
            "access": "protected",
            "tagname": "",
            "class": "DeviseAuthenticator",
            "module": "ember-simple-auth/authenticators/devise"
        },
        {
            "file": "addon/authenticators/oauth2-implicit-grant.js",
            "line": 20,
            "description": "Restores the session from a session data object; __will return a resolving\npromise when there is a non-empty `access_token` in the session data__ and\na rejecting promise otherwise.",
            "itemtype": "method",
            "name": "restore",
            "params": [
                {
                    "name": "data",
                    "description": "The data to restore the session from",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that when it resolves results in the session becoming or remaining authenticated",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "OAuth2ImplicitGrantAuthenticator",
            "module": "ember-simple-auth/authenticators/oauth2-implicit-grant"
        },
        {
            "file": "addon/authenticators/oauth2-implicit-grant.js",
            "line": 40,
            "description": "Authenticates the session using the specified location `hash`\n(see https://tools.ietf.org/html/rfc6749#section-4.2.2).\n\n__If the access token is valid and thus authentication succeeds, a promise that\nresolves with the access token is returned__, otherwise a promise that rejects\nwith the error code as returned by the server is returned\n(see https://tools.ietf.org/html/rfc6749#section-4.2.2.1).",
            "itemtype": "method",
            "name": "authenticate",
            "params": [
                {
                    "name": "hash",
                    "description": "The location hash",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that when it resolves results in the session becoming authenticated",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "OAuth2ImplicitGrantAuthenticator",
            "module": "ember-simple-auth/authenticators/oauth2-implicit-grant"
        },
        {
            "file": "addon/authenticators/oauth2-implicit-grant.js",
            "line": 66,
            "description": "This method simply returns a resolving promise.",
            "itemtype": "method",
            "name": "invalidate",
            "return": {
                "description": "A promise that when it resolves results in the session being invalidated",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "OAuth2ImplicitGrantAuthenticator",
            "module": "ember-simple-auth/authenticators/oauth2-implicit-grant"
        },
        {
            "file": "addon/authenticators/oauth2-password-grant.js",
            "line": 35,
            "description": "Triggered when the authenticator refreshed the access token (see\n[RFC 6749, section 6](http://tools.ietf.org/html/rfc6749#section-6)).",
            "itemtype": "event",
            "name": "sessionDataUpdated",
            "params": [
                {
                    "name": "data",
                    "description": "The updated session data",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "OAuth2PasswordGrantAuthenticator",
            "module": "ember-simple-auth/authenticators/oauth2-password-grant"
        },
        {
            "file": "addon/authenticators/oauth2-password-grant.js",
            "line": 44,
            "description": "The client_id to be sent to the authentication server (see\nhttps://tools.ietf.org/html/rfc6749#appendix-A.1). __This should only be\nused for statistics or logging etc. as it cannot actually be trusted since\nit could have been manipulated on the client!__",
            "itemtype": "property",
            "name": "clientId",
            "type": "String",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "OAuth2PasswordGrantAuthenticator",
            "module": "ember-simple-auth/authenticators/oauth2-password-grant"
        },
        {
            "file": "addon/authenticators/oauth2-password-grant.js",
            "line": 57,
            "description": "The OAuth2 standard is to send the client_id as a query parameter. This is a\nfeature flag that turns on the correct behavior for OAuth2 requests.",
            "itemtype": "property",
            "name": "sendClientIdAsQueryParam",
            "type": "Boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "OAuth2PasswordGrantAuthenticator",
            "module": "ember-simple-auth/authenticators/oauth2-password-grant"
        },
        {
            "file": "addon/authenticators/oauth2-password-grant.js",
            "line": 68,
            "description": "The endpoint on the server that authentication and token refresh requests\nare sent to.",
            "itemtype": "property",
            "name": "serverTokenEndpoint",
            "type": "String",
            "default": "'/token'",
            "access": "public",
            "tagname": "",
            "class": "OAuth2PasswordGrantAuthenticator",
            "module": "ember-simple-auth/authenticators/oauth2-password-grant"
        },
        {
            "file": "addon/authenticators/oauth2-password-grant.js",
            "line": 79,
            "description": "The endpoint on the server that token revocation requests are sent to. Only\nset this if the server actually supports token revocation. If this is\n`null`, the authenticator will not revoke tokens on session invalidation.\n\n__If token revocation is enabled but fails, session invalidation will be\nintercepted and the session will remain authenticated (see\n{{#crossLink \"OAuth2PasswordGrantAuthenticator/invalidate:method\"}}{{/crossLink}}).__",
            "itemtype": "property",
            "name": "serverTokenRevocationEndpoint",
            "type": "String",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "OAuth2PasswordGrantAuthenticator",
            "module": "ember-simple-auth/authenticators/oauth2-password-grant"
        },
        {
            "file": "addon/authenticators/oauth2-password-grant.js",
            "line": 95,
            "description": "Sets whether the authenticator automatically refreshes access tokens if the\nserver supports it.",
            "itemtype": "property",
            "name": "refreshAccessTokens",
            "type": "Boolean",
            "default": "true",
            "access": "public",
            "tagname": "",
            "class": "OAuth2PasswordGrantAuthenticator",
            "module": "ember-simple-auth/authenticators/oauth2-password-grant"
        },
        {
            "file": "addon/authenticators/oauth2-password-grant.js",
            "line": 106,
            "description": "The offset time in milliseconds to refresh the access token. This must\nreturn a random number. This randomization is needed because in case of\nmultiple tabs, we need to prevent the tabs from sending refresh token\nrequest at the same exact moment.\n\n__When overriding this property, make sure to mark the overridden property\nas volatile so it will actually have a different value each time it is\naccessed.__",
            "itemtype": "property",
            "name": "tokenRefreshOffset",
            "type": "Integer",
            "default": "a random number between 5 and 10",
            "access": "public",
            "tagname": "",
            "class": "OAuth2PasswordGrantAuthenticator",
            "module": "ember-simple-auth/authenticators/oauth2-password-grant"
        },
        {
            "file": "addon/authenticators/oauth2-password-grant.js",
            "line": 138,
            "description": "When authentication fails, the rejection callback is provided with the whole\nFetch API [Response](https://fetch.spec.whatwg.org/#response-class) object\ninstead of its responseJSON or responseText.\n\nThis is useful for cases when the backend provides additional context not\navailable in the response body.",
            "itemtype": "property",
            "name": "rejectWithXhr",
            "type": "Boolean",
            "default": "false",
            "deprecated": true,
            "deprecationMessage": "OAuth2PasswordGrantAuthenticator/rejectWithResponse:property",
            "access": "public",
            "tagname": "",
            "class": "OAuth2PasswordGrantAuthenticator",
            "module": "ember-simple-auth/authenticators/oauth2-password-grant"
        },
        {
            "file": "addon/authenticators/oauth2-password-grant.js",
            "line": 157,
            "description": "When authentication fails, the rejection callback is provided with the whole\nFetch API [Response](https://fetch.spec.whatwg.org/#response-class) object\ninstead of its responseJSON or responseText.\n\nThis is useful for cases when the backend provides additional context not\navailable in the response body.",
            "itemtype": "property",
            "name": "rejectWithResponse",
            "type": "Boolean",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "OAuth2PasswordGrantAuthenticator",
            "module": "ember-simple-auth/authenticators/oauth2-password-grant"
        },
        {
            "file": "addon/authenticators/oauth2-password-grant.js",
            "line": 172,
            "description": "Restores the session from a session data object; __will return a resolving\npromise when there is a non-empty `access_token` in the session data__ and\na rejecting promise otherwise.\n\nIf the server issues\n[expiring access tokens](https://tools.ietf.org/html/rfc6749#section-5.1)\nand there is an expired access token in the session data along with a\nrefresh token, the authenticator will try to refresh the access token and\nreturn a promise that resolves with the new access token if the refresh was\nsuccessful. If there is no refresh token or the token refresh is not\nsuccessful, a rejecting promise will be returned.",
            "itemtype": "method",
            "name": "restore",
            "params": [
                {
                    "name": "data",
                    "description": "The data to restore the session from",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that when it resolves results in the session becoming or remaining authenticated",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "OAuth2PasswordGrantAuthenticator",
            "module": "ember-simple-auth/authenticators/oauth2-password-grant"
        },
        {
            "file": "addon/authenticators/oauth2-password-grant.js",
            "line": 211,
            "description": "Authenticates the session with the specified `identification`, `password`\nand optional `scope`; issues a `POST` request to the\n{{#crossLink \"OAuth2PasswordGrantAuthenticator/serverTokenEndpoint:property\"}}{{/crossLink}}\nand receives the access token in response (see\nhttp://tools.ietf.org/html/rfc6749#section-4.3).\n\n__If the credentials are valid (and the optionally requested scope is\ngranted) and thus authentication succeeds, a promise that resolves with the\nserver's response is returned__, otherwise a promise that rejects with the\nerror as returned by the server is returned.\n\n__If the\n[server supports it](https://tools.ietf.org/html/rfc6749#section-5.1), this\nmethod also schedules refresh requests for the access token before it\nexpires.__\n\nThe server responses are expected to look as defined in the spec (see\nhttp://tools.ietf.org/html/rfc6749#section-5). The response to a successful\nauthentication request should be:\n\n```json\nHTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\n\n{\n  \"access_token\":\"2YotnFZFEjr1zCsicMWpAA\",\n  \"token_type\":\"bearer\",\n  \"expires_in\":3600, // optional\n  \"refresh_token\":\"tGzv3JOkF0XG5Qx2TlKWIA\" // optional\n}\n```\n\nThe response for a failing authentication request should be:\n\n```json\nHTTP/1.1 400 Bad Request\nContent-Type: application/json;charset=UTF-8\n\n{\n  \"error\":\"invalid_grant\"\n}\n```\n\nA full list of error codes can be found\n[here](https://tools.ietf.org/html/rfc6749#section-5.2).",
            "itemtype": "method",
            "name": "authenticate",
            "params": [
                {
                    "name": "identification",
                    "description": "The resource owner username",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "The resource owner password",
                    "type": "String"
                },
                {
                    "name": "scope",
                    "description": "The scope of the access request (see [RFC 6749, section 3.3](http://tools.ietf.org/html/rfc6749#section-3.3))",
                    "type": "String|Array"
                },
                {
                    "name": "headers",
                    "description": "Optional headers that particular backends may require (for example sending 2FA challenge responses)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that when it resolves results in the session becoming authenticated",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "OAuth2PasswordGrantAuthenticator",
            "module": "ember-simple-auth/authenticators/oauth2-password-grant"
        },
        {
            "file": "addon/authenticators/oauth2-password-grant.js",
            "line": 306,
            "description": "If token revocation is enabled, this will revoke the access token (and the\nrefresh token if present). If token revocation succeeds, this method\nreturns a resolving promise, otherwise it will return a rejecting promise,\nthus intercepting session invalidation.\n\nIf token revocation is not enabled this method simply returns a resolving\npromise.",
            "itemtype": "method",
            "name": "invalidate",
            "params": [
                {
                    "name": "data",
                    "description": "The current authenticated session data",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that when it resolves results in the session being invalidated",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "OAuth2PasswordGrantAuthenticator",
            "module": "ember-simple-auth/authenticators/oauth2-password-grant"
        },
        {
            "file": "addon/authenticators/oauth2-password-grant.js",
            "line": 348,
            "description": "Makes a request to the OAuth 2.0 server.",
            "itemtype": "method",
            "name": "makeRequest",
            "params": [
                {
                    "name": "url",
                    "description": "The request URL",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The request data",
                    "type": "Object"
                },
                {
                    "name": "headers",
                    "description": "Additional headers to send in request",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that resolves with the response object",
                "type": "Promise"
            },
            "access": "protected",
            "tagname": "",
            "class": "OAuth2PasswordGrantAuthenticator",
            "module": "ember-simple-auth/authenticators/oauth2-password-grant"
        },
        {
            "file": "addon/authenticators/torii.js",
            "line": 33,
            "description": "Restores the session by calling the torii provider's `fetch` method.\n\n__Many torii providers do not implement the `fetch` method__. If the\nprovider in use does not implement the method simply add it as follows:\n\n```js\n// app/torii-providers/facebook.js\nimport FacebookOauth2Provider from 'torii/providers/facebook-oauth2';\n\nexport default FacebookOauth2Provider.extend({\n  fetch(data) {\n    return data;\n  }\n});\n```",
            "itemtype": "method",
            "name": "restore",
            "params": [
                {
                    "name": "data",
                    "description": "The data to restore the session from",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that when it resolves results in the session becoming or remaining authenticated",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "ToriiAuthenticator",
            "module": "ember-simple-auth/authenticators/torii"
        },
        {
            "file": "addon/authenticators/torii.js",
            "line": 78,
            "description": "Authenticates the session by opening the specified torii provider. For more\ndocumentation on torii and its providers abstraction, see the\n[project's README](https://github.com/Vestorly/torii#readme), specifically\nthe\n[section on providers](https://github.com/Vestorly/torii#configuring-a-torii-provider).",
            "itemtype": "method",
            "name": "authenticate",
            "params": [
                {
                    "name": "provider",
                    "description": "The torii provider to authenticate the session with",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The options to pass to the torii provider",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that when it resolves results in the session becoming authenticated",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "ToriiAuthenticator",
            "module": "ember-simple-auth/authenticators/torii"
        },
        {
            "file": "addon/authenticators/torii.js",
            "line": 100,
            "description": "Closes the torii provider. If the provider is successfully closed, this\nmethod returns a resolving promise, otherwise it will return a rejecting\npromise, thus intercepting session invalidation.",
            "itemtype": "method",
            "name": "invalidate",
            "return": {
                "description": "A promise that when it resolves results in the session being invalidated",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "ToriiAuthenticator",
            "module": "ember-simple-auth/authenticators/torii"
        },
        {
            "file": "addon/authorizers/base.js",
            "line": 37,
            "description": "Authorizes a block of code. This method will be invoked by the session\nservice's {{#crossLink \"SessionService/authorize:method\"}}{{/crossLink}}\nmethod which will pass the current authenticated session data (see\n{{#crossLink \"SessionService/data:property\"}}{{/crossLink}}) and a block.\nDepending on the mechanism it implements, the authorizer transforms the\nsession data into authorization data and invokes the block with that data.\n\n`BaseAuthorizer`'s implementation does nothing. __This method must be\noverridden in custom authorizers.__",
            "itemtype": "method",
            "name": "authorize",
            "params": [
                {
                    "name": "data",
                    "description": "The current authenticated session data",
                    "type": "Object"
                },
                {
                    "name": "block",
                    "description": "The callback to call with the authorization data",
                    "type": "Function"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "BaseAuthorizer",
            "module": "ember-simple-auth/authorizers/base"
        },
        {
            "file": "addon/authorizers/devise.js",
            "line": 24,
            "description": "The token attribute name.",
            "itemtype": "property",
            "name": "tokenAttributeName",
            "type": "String",
            "default": "'token'",
            "access": "public",
            "tagname": "",
            "class": "DeviseAuthorizer",
            "module": "ember-simple-auth/authorizers/devise"
        },
        {
            "file": "addon/authorizers/devise.js",
            "line": 34,
            "description": "The identification attribute name.",
            "itemtype": "property",
            "name": "identificationAttributeName",
            "type": "String",
            "default": "'email'",
            "access": "public",
            "tagname": "",
            "class": "DeviseAuthorizer",
            "module": "ember-simple-auth/authorizers/devise"
        },
        {
            "file": "addon/authorizers/devise.js",
            "line": 44,
            "description": "Includes the user's token (see\n{{#crossLink \"DeviseAuthenticator/tokenAttributeName:property\"}}{{/crossLink}})\nand identification (see\n{{#crossLink \"DeviseAuthenticator/identificationAttributeName:property\"}}{{/crossLink}})\nin the `Authorization` header.",
            "itemtype": "method",
            "name": "authorize",
            "params": [
                {
                    "name": "data",
                    "description": "The data that the session currently holds",
                    "type": "Object"
                },
                {
                    "name": "block(headerName,headerContent)",
                    "description": "The callback to call with the authorization data; will receive the header name and header content as arguments.",
                    "type": "Function"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "DeviseAuthorizer",
            "module": "ember-simple-auth/authorizers/devise"
        },
        {
            "file": "addon/authorizers/oauth2-bearer.js",
            "line": 21,
            "description": "Includes the access token from the session data into the `Authorization`\nheader as a Bearer token, e.g.:\n\n```\nAuthorization: Bearer 234rtgjneroigne4\n```",
            "itemtype": "method",
            "name": "authorize",
            "params": [
                {
                    "name": "data",
                    "description": "The data that the session currently holds",
                    "type": "Object"
                },
                {
                    "name": "block(headerName,headerContent)",
                    "description": "The callback to call with the authorization data; will receive the header name and header content as arguments",
                    "type": "Function"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "OAuth2BearerAuthorizer",
            "module": "ember-simple-auth/authorizers/oauth2-bearer"
        },
        {
            "file": "addon/mixins/application-route-mixin.js",
            "line": 49,
            "description": "The session service.",
            "itemtype": "property",
            "name": "session",
            "readonly": "",
            "type": "SessionService",
            "access": "public",
            "tagname": "",
            "class": "ApplicationRouteMixin",
            "module": "ember-simple-auth/mixins/application-route-mixin"
        },
        {
            "file": "addon/mixins/application-route-mixin.js",
            "line": 61,
            "description": "The route to transition to after successful authentication.",
            "itemtype": "property",
            "name": "routeAfterAuthentication",
            "type": "String",
            "default": "'index'",
            "access": "public",
            "tagname": "",
            "class": "ApplicationRouteMixin",
            "module": "ember-simple-auth/mixins/application-route-mixin"
        },
        {
            "file": "addon/mixins/application-route-mixin.js",
            "line": 87,
            "description": "This method handles the session's\n{{#crossLink \"SessionService/authenticationSucceeded:event\"}}{{/crossLink}}\nevent. If there is a transition that was previously intercepted by the\n{{#crossLink \"AuthenticatedRouteMixin/beforeModel:method\"}}\nAuthenticatedRouteMixin's `beforeModel` method{{/crossLink}} it will retry\nit. If there is no such transition, the `ember_simple_auth-redirectTarget`\ncookie will be checked for a url that represents an attemptedTransition\nthat was aborted in Fastboot mode, otherwise this action transitions to the\n{{#crossLink \"Configuration/routeAfterAuthentication:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "sessionAuthenticated",
            "access": "public",
            "tagname": "",
            "class": "ApplicationRouteMixin",
            "module": "ember-simple-auth/mixins/application-route-mixin"
        },
        {
            "file": "addon/mixins/application-route-mixin.js",
            "line": 118,
            "description": "This method handles the session's\n{{#crossLink \"SessionService/invalidationSucceeded:event\"}}{{/crossLink}}\nevent. __It reloads the Ember.js application__ by redirecting the browser\nto the application's root URL so that all in-memory data (such as Ember\nData stores etc.) gets cleared.\n\nIf the Ember.js application will be used in an environment where the users\ndon't have direct access to any data stored on the client (e.g.\n[cordova](http://cordova.apache.org)) this action can be overridden to e.g.\nsimply transition to the index route.",
            "itemtype": "method",
            "name": "sessionInvalidated",
            "access": "public",
            "tagname": "",
            "class": "ApplicationRouteMixin",
            "module": "ember-simple-auth/mixins/application-route-mixin"
        },
        {
            "file": "addon/mixins/authenticated-route-mixin.js",
            "line": 9,
            "description": "If the user is unauthenticated, invoke `callback`",
            "params": [
                {
                    "name": "owner",
                    "description": "The ApplicationInstance that owns the service (and possibly fastboot and cookie) service(s)",
                    "type": "ApplicationInstance"
                },
                {
                    "name": "transition",
                    "description": "Transition for the user's original navigation",
                    "type": "Transition"
                },
                {
                    "name": "callback",
                    "description": "Callback that will be invoked if the user is unauthenticated",
                    "type": "(...args: []any) => any"
                }
            ],
            "class": "AuthenticatedRouteMixin",
            "module": "ember-simple-auth/mixins/application-route-mixin"
        },
        {
            "file": "addon/mixins/authenticated-route-mixin.js",
            "line": 55,
            "description": "The session service.",
            "itemtype": "property",
            "name": "session",
            "readonly": "",
            "type": "SessionService",
            "access": "public",
            "tagname": "",
            "class": "AuthenticatedRouteMixin",
            "module": "ember-simple-auth/mixins/authenticated-route-mixin"
        },
        {
            "file": "addon/mixins/authenticated-route-mixin.js",
            "line": 72,
            "description": "The route to transition to for authentication. The\n{{#crossLink \"AuthenticatedRouteMixin\"}}{{/crossLink}} will transition to\nthis route when a route that implements the mixin is accessed when the\nroute is not authenticated.",
            "itemtype": "property",
            "name": "authenticationRoute",
            "type": "String",
            "default": "'login'",
            "access": "public",
            "tagname": "",
            "class": "AuthenticatedRouteMixin",
            "module": "ember-simple-auth/mixins/authenticated-route-mixin"
        },
        {
            "file": "addon/mixins/authenticated-route-mixin.js",
            "line": 87,
            "description": "Checks whether the session is authenticated and if it is not aborts the\ncurrent transition and instead transitions to the\n{{#crossLink \"Configuration/authenticationRoute:property\"}}{{/crossLink}}.\nIf the current transition is aborted, this method will save it in the\nsession service's\n{{#crossLink \"SessionService/attemptedTransition:property\"}}{{/crossLink}}\nproperty so that  it can be retried after the session is authenticated\n(see\n{{#crossLink \"ApplicationRouteMixin/sessionAuthenticated:method\"}}{{/crossLink}}).\nIf the transition is aborted in Fastboot mode, the transition's target\nURL will be saved in a `ember_simple_auth-redirectTarget` cookie for use by\nthe browser after authentication is complete.\n\n__If `beforeModel` is overridden in a route that uses this mixin, the route's\n   implementation must call `this._super(...arguments)`__ so that the mixin's\n   `beforeModel` method is actually executed.",
            "itemtype": "method",
            "name": "beforeModel",
            "params": [
                {
                    "name": "transition",
                    "description": "The transition that lead to this route",
                    "type": "Transition"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "AuthenticatedRouteMixin",
            "module": "ember-simple-auth/mixins/authenticated-route-mixin"
        },
        {
            "file": "addon/mixins/authenticated-route-mixin.js",
            "line": 118,
            "description": "Triggers authentication; by default this method transitions to the\n`authenticationRoute`. In case the application uses an authentication\nmechanism that does not use an authentication route, this method can be\noverridden.",
            "itemtype": "method",
            "name": "triggerAuthentication",
            "access": "protected",
            "tagname": "",
            "class": "AuthenticatedRouteMixin",
            "module": "ember-simple-auth/mixins/authenticated-route-mixin"
        },
        {
            "file": "addon/mixins/data-adapter-mixin.js",
            "line": 35,
            "description": "The session service.",
            "itemtype": "property",
            "name": "session",
            "readonly": "",
            "type": "SessionService",
            "access": "public",
            "tagname": "",
            "class": "DataAdapterMixin",
            "module": "ember-simple-auth/mixins/data-adapter-mixin"
        },
        {
            "file": "addon/mixins/data-adapter-mixin.js",
            "line": 45,
            "description": "The authorizer that is used to authorize API requests. The authorizer has\nto call the authorization callback (see\n{{#crossLink \"BaseAuthorizer/authorize:method\"}}{{/crossLink}}) with header\nname and header content arguments. __This property must be overridden in\nadapters using this mixin.__\n\nWhen used with `ember-fetch` the `authorize` method will not be called and\nthe `headers` computed property must be used instead, e.g.:\n\n```js\nexport default DS.JSONAPIAdapter.extend(AdapterFetch, DataAdapterMixin, {\n  headers: computed('session.data.authenticated.token', function() {\n    const headers = {};\n    if (this.session.isAuthenticated) {\n      headers['Authorization'] = `Bearer ${this.session.data.authenticated.token}`;\n    }\n\n    return headers;\n  }),\n});\n```",
            "itemtype": "property",
            "name": "authorizer",
            "type": "String",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "DataAdapterMixin",
            "module": "ember-simple-auth/mixins/data-adapter-mixin"
        },
        {
            "file": "addon/mixins/data-adapter-mixin.js",
            "line": 75,
            "description": "Defines a `beforeSend` hook (see http://api.jquery.com/jQuery.ajax/) that\ninjects a request header containing the authorization data as constructed\nby the {{#crossLink \"DataAdapterMixin/authorizer:property\"}}{{/crossLink}}\n(see\n{{#crossLink \"SessionService/authorize:method\"}}{{/crossLink}}). The\nspecific header name and contents depend on the actual authorizer that is\nused.\n\nUntil [emberjs/rfcs#171](https://github.com/emberjs/rfcs/pull/171)\ngets resolved and [ds-improved-ajax](https://github.com/emberjs/data/pull/3099)\n[feature flag](https://github.com/emberjs/data/blob/master/FEATURES.md#feature-flags)\nis enabled, this method will be called for **every** ember-data version.\n`headersForRequest` *should* replace it after the resolution of the RFC.",
            "itemtype": "method",
            "name": "ajaxOptions",
            "access": "protected",
            "tagname": "",
            "class": "DataAdapterMixin",
            "module": "ember-simple-auth/mixins/data-adapter-mixin"
        },
        {
            "file": "addon/mixins/data-adapter-mixin.js",
            "line": 118,
            "description": "Adds request headers containing the authorization data as constructed\nby the {{#crossLink \"DataAdapterMixin/authorizer:property\"}}{{/crossLink}}.\n\nUntil [emberjs/rfcs#171](https://github.com/emberjs/rfcs/pull/171)\ngets resolved and [ds-improved-ajax](https://github.com/emberjs/data/pull/3099)\n[feature flag](https://github.com/emberjs/data/blob/master/FEATURES.md#feature-flags)\nis enabled, this method will **not** be used.\nSee `ajaxOptions` instead.",
            "itemtype": "method",
            "name": "headersForRequest",
            "access": "protected",
            "tagname": "",
            "class": "DataAdapterMixin",
            "module": "ember-simple-auth/mixins/data-adapter-mixin"
        },
        {
            "file": "addon/mixins/data-adapter-mixin.js",
            "line": 143,
            "description": "This method is called for every response that the adapter receives from the\nAPI. If the response has a 401 status code it invalidates the session (see\n{{#crossLink \"SessionService/invalidate:method\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "handleResponse",
            "params": [
                {
                    "name": "status",
                    "description": "The response status as received from the API",
                    "type": "Number"
                },
                {
                    "name": "headers",
                    "description": "HTTP headers as received from the API",
                    "type": "Object"
                },
                {
                    "name": "payload",
                    "description": "The response body as received from the API",
                    "type": "Any"
                },
                {
                    "name": "requestData",
                    "description": "the original request information",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataAdapterMixin",
            "module": "ember-simple-auth/mixins/data-adapter-mixin"
        },
        {
            "file": "addon/mixins/data-adapter-mixin.js",
            "line": 160,
            "description": "The default implementation for handleResponse.\nIf the response has a 401 status code it invalidates the session (see\n {{#crossLink \"SessionService/invalidate:method\"}}{{/crossLink}}).\n\nOverride this method if you want custom invalidation logic for incoming responses.",
            "itemtype": "method",
            "name": "ensureResponseAuthorized",
            "params": [
                {
                    "name": "status",
                    "description": "The response status as received from the API",
                    "type": "Number"
                },
                {
                    "name": "headers",
                    "description": "HTTP headers as received from the API",
                    "type": "Object"
                },
                {
                    "name": "payload",
                    "description": "The response body as received from the API",
                    "type": "Any"
                },
                {
                    "name": "requestData",
                    "description": "the original request information",
                    "type": "Object"
                }
            ],
            "class": "DataAdapterMixin",
            "module": "ember-simple-auth/mixins/data-adapter-mixin"
        },
        {
            "file": "addon/mixins/oauth2-implicit-grant-callback-route-mixin.js",
            "line": 36,
            "description": "The session service.",
            "itemtype": "property",
            "name": "session",
            "readonly": "",
            "type": "SessionService",
            "access": "public",
            "tagname": "",
            "class": "OAuth2ImplicitGrantCallbackRouteMixin",
            "module": "ember-simple-auth/mixins/oauth2-implicit-grant-callback-route-mixin"
        },
        {
            "file": "addon/mixins/oauth2-implicit-grant-callback-route-mixin.js",
            "line": 46,
            "description": "The authenticator that should be used to authenticate the callback. This\nmust be a subclass of the\n{{#crossLink \"OAuth2ImplicitGrantAuthenticator\"}}{{/crossLink}}\nauthenticator.",
            "itemtype": "property",
            "name": "authenticator",
            "type": "String",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "OAuth2ImplicitGrantCallbackRouteMixin",
            "module": "ember-simple-auth/mixins/oauth2-implicit-grant-callback-route-mixin"
        },
        {
            "file": "addon/mixins/oauth2-implicit-grant-callback-route-mixin.js",
            "line": 59,
            "description": "Any error that potentially occurs during authentication will be stored in\nthis property.",
            "itemtype": "property",
            "name": "error",
            "type": "String",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "OAuth2ImplicitGrantCallbackRouteMixin",
            "module": "ember-simple-auth/mixins/oauth2-implicit-grant-callback-route-mixin"
        },
        {
            "file": "addon/mixins/oauth2-implicit-grant-callback-route-mixin.js",
            "line": 70,
            "description": "Passes the hash received with the redirection from the authentication\nserver to the\n{{#crossLink \"OAuth2ImplicitGrantAuthenticator\"}}{{/crossLink}} and\nauthenticates the session with the authenticator.",
            "itemtype": "method",
            "name": "activate",
            "access": "public",
            "tagname": "",
            "class": "OAuth2ImplicitGrantCallbackRouteMixin",
            "module": "ember-simple-auth/mixins/oauth2-implicit-grant-callback-route-mixin"
        },
        {
            "file": "addon/mixins/unauthenticated-route-mixin.js",
            "line": 9,
            "params": [
                {
                    "name": "owner",
                    "description": "The ApplicationInstance that owns the session service",
                    "type": "ApplicationInstance"
                },
                {
                    "name": "callback",
                    "description": "Callback that will be invoked if the user is authenticated",
                    "type": "(...args: [any]) => any"
                }
            ],
            "class": "UnauthenticatedRouteMixin",
            "module": "ember-simple-auth/mixins/oauth2-implicit-grant-callback-route-mixin"
        },
        {
            "file": "addon/mixins/unauthenticated-route-mixin.js",
            "line": 43,
            "description": "The session service.",
            "itemtype": "property",
            "name": "session",
            "readonly": "",
            "type": "SessionService",
            "access": "public",
            "tagname": "",
            "class": "UnauthenticatedRouteMixin",
            "module": "ember-simple-auth/mixins/unauthenticated-route-mixin"
        },
        {
            "file": "addon/mixins/unauthenticated-route-mixin.js",
            "line": 55,
            "description": "The route to transition to if a route that implements the\n{{#crossLink \"UnauthenticatedRouteMixin\"}}{{/crossLink}} is accessed when\nthe session is authenticated.",
            "itemtype": "property",
            "name": "routeIfAlreadyAuthenticated",
            "type": "String",
            "default": "'index'",
            "access": "public",
            "tagname": "",
            "class": "UnauthenticatedRouteMixin",
            "module": "ember-simple-auth/mixins/unauthenticated-route-mixin"
        },
        {
            "file": "addon/mixins/unauthenticated-route-mixin.js",
            "line": 69,
            "description": "Checks whether the session is authenticated and if it is aborts the current\ntransition and instead transitions to the\n{{#crossLink \"Configuration/routeIfAlreadyAuthenticated:property\"}}{{/crossLink}}.\n\n__If `beforeModel` is overridden in a route that uses this mixin, the route's\n   implementation must call `this._super(...arguments)`__ so that the mixin's\n   `beforeModel` method is actually executed.",
            "itemtype": "method",
            "name": "beforeModel",
            "access": "public",
            "tagname": "",
            "class": "UnauthenticatedRouteMixin",
            "module": "ember-simple-auth/mixins/unauthenticated-route-mixin"
        },
        {
            "file": "addon/services/session.js",
            "line": 33,
            "description": "Triggered whenever the session is successfully authenticated. This happens\nwhen the session gets authenticated via\n{{#crossLink \"SessionService/authenticate:method\"}}{{/crossLink}} but also\nwhen the session is authenticated in another tab or window of the same\napplication and the session state gets synchronized across tabs or windows\nvia the store (see\n{{#crossLink \"BaseStore/sessionDataUpdated:event\"}}{{/crossLink}}).\n\nWhen using the {{#crossLink \"ApplicationRouteMixin\"}}{{/crossLink}} this\nevent will automatically get handled (see\n{{#crossLink \"ApplicationRouteMixin/sessionAuthenticated:method\"}}{{/crossLink}}).",
            "itemtype": "event",
            "name": "authenticationSucceeded",
            "access": "public",
            "tagname": "",
            "class": "SessionService",
            "module": "ember-simple-auth/services/session"
        },
        {
            "file": "addon/services/session.js",
            "line": 50,
            "description": "Triggered whenever the session is successfully invalidated. This happens\nwhen the session gets invalidated via\n{{#crossLink \"SessionService/invalidate:method\"}}{{/crossLink}} but also\nwhen the session is invalidated in another tab or window of the same\napplication and the session state gets synchronized across tabs or windows\nvia the store (see\n{{#crossLink \"BaseStore/sessionDataUpdated:event\"}}{{/crossLink}}).\n\nWhen using the {{#crossLink \"ApplicationRouteMixin\"}}{{/crossLink}} this\nevent will automatically get handled (see\n{{#crossLink \"ApplicationRouteMixin/sessionInvalidated:method\"}}{{/crossLink}}).",
            "itemtype": "event",
            "name": "invalidationSucceeded",
            "access": "public",
            "tagname": "",
            "class": "SessionService",
            "module": "ember-simple-auth/services/session"
        },
        {
            "file": "addon/services/session.js",
            "line": 67,
            "description": "Returns whether the session is currently authenticated.",
            "itemtype": "property",
            "name": "isAuthenticated",
            "type": "Boolean",
            "readonly": "",
            "default": "false",
            "access": "public",
            "tagname": "",
            "class": "SessionService",
            "module": "ember-simple-auth/services/session"
        },
        {
            "file": "addon/services/session.js",
            "line": 78,
            "description": "The current session data as a plain object. The\n`authenticated` key holds the session data that the authenticator resolved\nwith when the session was authenticated (see\n{{#crossLink \"BaseAuthenticator/authenticate:method\"}}{{/crossLink}}) and\nthat will be cleared when the session is invalidated. This data cannot be\nwritten. All other session data is writable and will not be cleared when\nthe session is invalidated.",
            "itemtype": "property",
            "name": "data",
            "type": "Object",
            "readonly": "",
            "default": "{ authenticated: {} }",
            "access": "public",
            "tagname": "",
            "class": "SessionService",
            "module": "ember-simple-auth/services/session"
        },
        {
            "file": "addon/services/session.js",
            "line": 95,
            "description": "The session store.",
            "itemtype": "property",
            "name": "store",
            "type": "BaseStore",
            "readonly": "",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "SessionService",
            "module": "ember-simple-auth/services/session"
        },
        {
            "file": "addon/services/session.js",
            "line": 106,
            "description": "A previously attempted but intercepted transition (e.g. by the\n{{#crossLink \"AuthenticatedRouteMixin\"}}{{/crossLink}}). If an attempted\ntransition is present, the\n{{#crossLink \"ApplicationRouteMixin\"}}{{/crossLink}} will retry it when the\nsession becomes authenticated (see\n{{#crossLink \"ApplicationRouteMixin/sessionAuthenticated:method\"}}{{/crossLink}}).",
            "itemtype": "property",
            "name": "attemptedTransition",
            "type": "Transition",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "SessionService",
            "module": "ember-simple-auth/services/session"
        },
        {
            "file": "addon/services/session.js",
            "line": 151,
            "description": "__Authenticates the session with an `authenticator`__ and appropriate\narguments. The authenticator implements the actual steps necessary to\nauthenticate the session (see\n{{#crossLink \"BaseAuthenticator/authenticate:method\"}}{{/crossLink}}) and\nreturns a promise after doing so. The session handles the returned promise\nand when it resolves becomes authenticated, otherwise remains\nunauthenticated. All data the authenticator resolves with will be\naccessible via the\n{{#crossLink \"SessionService/data:property\"}}session data's{{/crossLink}}\n`authenticated` property.\n\n__This method returns a promise. A resolving promise indicates that the\nsession was successfully authenticated__ while a rejecting promise\nindicates that authentication failed and the session remains\nunauthenticated. The promise does not resolve with a value; instead, the\ndata returned from the authenticator is available via the\n{{#crossLink \"SessionService/data:property\"}}{{/crossLink}} property.\n\nWhen authentication succeeds this will trigger the\n{{#crossLink \"SessionService/authenticationSucceeded:event\"}}{{/crossLink}}\nevent.",
            "itemtype": "method",
            "name": "authenticate",
            "params": [
                {
                    "name": "authenticator",
                    "description": "The authenticator to use to authenticate the session",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "The arguments to pass to the authenticator; depending on the type of authenticator these might be a set of credentials, a Facebook OAuth Token, etc.",
                    "type": "Any",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "A promise that resolves when the session was authenticated successfully and rejects otherwise",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "SessionService",
            "module": "ember-simple-auth/services/session"
        },
        {
            "file": "addon/services/session.js",
            "line": 186,
            "description": "__Invalidates the session with the authenticator it is currently\nauthenticated with__ (see\n{{#crossLink \"SessionService/authenticate:method\"}}{{/crossLink}}). This\ninvokes the authenticator's\n{{#crossLink \"BaseAuthenticator/invalidate:method\"}}{{/crossLink}} method\nand handles the returned promise accordingly.\n\nThis method returns a promise. A resolving promise indicates that the\nsession was successfully invalidated while a rejecting promise indicates\nthat invalidation failed and the session remains authenticated. Once the\nsession is successfully invalidated it clears all of its authenticated data\n(see {{#crossLink \"SessionService/data:property\"}}{{/crossLink}}).\n\nWhen invalidation succeeds this will trigger the\n{{#crossLink \"SessionService/invalidationSucceeded:event\"}}{{/crossLink}}\nevent.\n\nWhen calling the {{#crossLink \"BaseAuthenticator/invalidate:method\"}}{{/crossLink}}\non an already unauthenticated session, the method will return a resolved Promise\nimmediately.",
            "itemtype": "method",
            "name": "invalidate",
            "params": [
                {
                    "name": "args",
                    "description": "arguments that will be passed to the authenticator",
                    "type": "Array",
                    "multiple": true
                }
            ],
            "return": {
                "description": "A promise that resolves when the session was invalidated successfully and rejects otherwise",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "SessionService",
            "module": "ember-simple-auth/services/session"
        },
        {
            "file": "addon/services/session.js",
            "line": 219,
            "description": "Authorizes a block of code with an authorizer (see\n{{#crossLink \"BaseAuthorizer/authorize:method\"}}{{/crossLink}}) if the\nsession is authenticated. If the session is not currently authenticated\nthis method does nothing.\n\n```js\nthis.get('session').authorize('authorizer:oauth2-bearer', (headerName, headerValue) => {\n  xhr.setRequestHeader(headerName, headerValue);\n});\n```",
            "itemtype": "method",
            "name": "authorize",
            "params": [
                {
                    "name": "authorizer",
                    "description": "The authorizer to authorize the block with",
                    "type": "String"
                },
                {
                    "name": "block",
                    "description": "The block of code to call with the authorization data generated by the authorizer",
                    "type": "Function"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Session/authorize:method",
            "access": "public",
            "tagname": "",
            "class": "SessionService",
            "module": "ember-simple-auth/services/session"
        },
        {
            "file": "addon/session-stores/adaptive.js",
            "line": 46,
            "description": "The `localStorage` key the store persists data in if `localStorage` is\navailable.",
            "itemtype": "property",
            "name": "localStorageKey",
            "type": "String",
            "default": "'ember_simple_auth-session'",
            "access": "public",
            "tagname": "",
            "class": "AdaptiveStore",
            "module": "ember-simple-auth/session-stores/adaptive"
        },
        {
            "file": "addon/session-stores/adaptive.js",
            "line": 57,
            "description": "The domain to use for the cookie if `localStorage` is not available, e.g.,\n\"example.com\", \".example.com\" (which includes all subdomains) or\n\"subdomain.example.com\". If not explicitly set, the cookie domain defaults\nto the domain the session was authenticated on.",
            "itemtype": "property",
            "name": "cookieDomain",
            "type": "String",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "AdaptiveStore",
            "module": "ember-simple-auth/session-stores/adaptive"
        },
        {
            "file": "addon/session-stores/adaptive.js",
            "line": 71,
            "description": "The name of the cookie to use if `localStorage` is not available.",
            "itemtype": "property",
            "name": "cookieName",
            "type": "String",
            "default": "ember_simple_auth-session",
            "access": "public",
            "tagname": "",
            "class": "AdaptiveStore",
            "module": "ember-simple-auth/session-stores/adaptive"
        },
        {
            "file": "addon/session-stores/adaptive.js",
            "line": 82,
            "description": "The path to use for the cookie, e.g., \"/\", \"/something\".",
            "itemtype": "property",
            "name": "cookiePath",
            "type": "String",
            "default": "'/'",
            "access": "public",
            "tagname": "",
            "class": "AdaptiveStore",
            "module": "ember-simple-auth/session-stores/adaptive"
        },
        {
            "file": "addon/session-stores/adaptive.js",
            "line": 93,
            "description": "The expiration time for the cookie in seconds if `localStorage` is not\navailable. A value of `null` will make the cookie a session cookie that\nexpires and gets deleted when the browser is closed.",
            "itemtype": "property",
            "name": "cookieExpirationTime",
            "default": "null",
            "type": "Integer",
            "access": "public",
            "tagname": "",
            "class": "AdaptiveStore",
            "module": "ember-simple-auth/session-stores/adaptive"
        },
        {
            "file": "addon/session-stores/adaptive.js",
            "line": 153,
            "description": "Persists the `data` in the `localStorage` if it is available or in a cookie\nif it is not.",
            "itemtype": "method",
            "name": "persist",
            "params": [
                {
                    "name": "data",
                    "description": "The data to persist",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that resolves when the data has successfully been persisted and rejects otherwise.",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "AdaptiveStore",
            "module": "ember-simple-auth/session-stores/adaptive"
        },
        {
            "file": "addon/session-stores/adaptive.js",
            "line": 166,
            "description": "Returns all data currently stored in the `localStorage` if that is\navailable - or if it is not, in the cookie - as a plain object.",
            "itemtype": "method",
            "name": "restore",
            "return": {
                "description": "A promise that resolves with the data currently persisted in the store when the data has been restored successfully and rejects otherwise.",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "AdaptiveStore",
            "module": "ember-simple-auth/session-stores/adaptive"
        },
        {
            "file": "addon/session-stores/adaptive.js",
            "line": 178,
            "description": "Clears the store by deleting the\n{{#crossLink \"LocalStorageStore/key:property\"}}{{/crossLink}} from\n`localStorage` if that is available or by deleting the cookie if it is not.",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "A promise that resolves when the store has been cleared successfully and rejects otherwise.",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "AdaptiveStore",
            "module": "ember-simple-auth/session-stores/adaptive"
        },
        {
            "file": "addon/session-stores/base.js",
            "line": 19,
            "description": "Triggered when the session store's data changes due to an external event,\ne.g., from another tab or window of the same application. The session\nhandles that event, passes the updated data to its authenticator's\n{{#crossLink \"BaseAuthenticator/restore:method\"}}{{/crossLink}} method and\nhandles the result of that invocation accordingly.",
            "itemtype": "event",
            "name": "sessionDataUpdated",
            "params": [
                {
                    "name": "data",
                    "description": "The updated session data",
                    "type": "Object"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "BaseStore",
            "module": "ember-simple-auth/session-stores/base"
        },
        {
            "file": "addon/session-stores/base.js",
            "line": 31,
            "description": "Persists the `data`. This replaces all currently stored data.\n\n`BaseStores`'s implementation always returns a rejecting promise. __This\nmethod must be overridden in subclasses__.",
            "itemtype": "method",
            "name": "persist",
            "params": [
                {
                    "name": "data",
                    "description": "The data to persist",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that resolves when the data has successfully been persisted and rejects otherwise.",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "BaseStore",
            "module": "ember-simple-auth/session-stores/base"
        },
        {
            "file": "addon/session-stores/base.js",
            "line": 46,
            "description": "Returns all data currently stored as a plain object.\n\n`BaseStores`'s implementation always returns a rejecting promise. __This\nmethod must be overridden in subclasses__.",
            "itemtype": "method",
            "name": "restore",
            "return": {
                "description": "A promise that resolves with the data currently persisted in the store when the data has been restored successfully and rejects otherwise.",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "BaseStore",
            "module": "ember-simple-auth/session-stores/base"
        },
        {
            "file": "addon/session-stores/base.js",
            "line": 60,
            "description": "Clears the store.\n\n`BaseStores`'s implementation always returns a rejecting promise. __This\nmethod must be overridden in subclasses__.",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "A promise that resolves when the store has been cleared successfully and rejects otherwise.",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "BaseStore",
            "module": "ember-simple-auth/session-stores/base"
        },
        {
            "file": "addon/session-stores/cookie.js",
            "line": 73,
            "description": "The domain to use for the cookie, e.g., \"example.com\", \".example.com\"\n(which includes all subdomains) or \"subdomain.example.com\". If not\nexplicitly set, the cookie domain defaults to the domain the session was\nauthenticated on.",
            "itemtype": "property",
            "name": "cookieDomain",
            "type": "String",
            "default": "null",
            "access": "public",
            "tagname": "",
            "class": "CookieStore",
            "module": "ember-simple-auth/session-stores/cookie"
        },
        {
            "file": "addon/session-stores/cookie.js",
            "line": 87,
            "description": "The name of the cookie.",
            "itemtype": "property",
            "name": "cookieName",
            "type": "String",
            "default": "ember_simple_auth-session",
            "access": "public",
            "tagname": "",
            "class": "CookieStore",
            "module": "ember-simple-auth/session-stores/cookie"
        },
        {
            "file": "addon/session-stores/cookie.js",
            "line": 100,
            "description": "The path to use for the cookie, e.g., \"/\", \"/something\".",
            "itemtype": "property",
            "name": "cookiePath",
            "type": "String",
            "default": "'/'",
            "access": "public",
            "tagname": "",
            "class": "CookieStore",
            "module": "ember-simple-auth/session-stores/cookie"
        },
        {
            "file": "addon/session-stores/cookie.js",
            "line": 111,
            "description": "The expiration time for the cookie in seconds. A value of `null` will make\nthe cookie a session cookie that expires and gets deleted when the browser\nis closed.\n\nThe recommended minimum value is 90 seconds. If your value is less than\nthat, the cookie may expire before its expiration time is extended\n(expiration time is extended every 60 seconds).",
            "itemtype": "property",
            "name": "cookieExpirationTime",
            "default": "null",
            "type": "Integer",
            "access": "public",
            "tagname": "",
            "class": "CookieStore",
            "module": "ember-simple-auth/session-stores/cookie"
        },
        {
            "file": "addon/session-stores/cookie.js",
            "line": 180,
            "description": "Persists the `data` in the cookie.",
            "itemtype": "method",
            "name": "persist",
            "params": [
                {
                    "name": "data",
                    "description": "The data to persist",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that resolves when the data has successfully been persisted and rejects otherwise.",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "CookieStore",
            "module": "ember-simple-auth/session-stores/cookie"
        },
        {
            "file": "addon/session-stores/cookie.js",
            "line": 196,
            "description": "Returns all data currently stored in the cookie as a plain object.",
            "itemtype": "method",
            "name": "restore",
            "return": {
                "description": "A promise that resolves with the data currently persisted in the store when the data has been restored successfully and rejects otherwise.",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "CookieStore",
            "module": "ember-simple-auth/session-stores/cookie"
        },
        {
            "file": "addon/session-stores/cookie.js",
            "line": 212,
            "description": "Clears the store by deleting the cookie.",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "A promise that resolves when the store has been cleared successfully and rejects otherwise.",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "CookieStore",
            "module": "ember-simple-auth/session-stores/cookie"
        },
        {
            "file": "addon/session-stores/ephemeral.js",
            "line": 21,
            "description": "Persists `data`. This replaces all currently stored data.",
            "itemtype": "method",
            "name": "persist",
            "params": [
                {
                    "name": "data",
                    "description": "The data to persist",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that resolves when the data has successfully been persisted and rejects otherwise.",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "EphemeralStore",
            "module": "ember-simple-auth/session-stores/ephemeral"
        },
        {
            "file": "addon/session-stores/ephemeral.js",
            "line": 35,
            "description": "Returns all data currently stored as a plain object.",
            "itemtype": "method",
            "name": "restore",
            "return": {
                "description": "A promise that resolves with the data currently persisted in the store when the data has been restored successfully and rejects otherwise.",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "EphemeralStore",
            "module": "ember-simple-auth/session-stores/ephemeral"
        },
        {
            "file": "addon/session-stores/ephemeral.js",
            "line": 48,
            "description": "Clears the store.",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "A promise that resolves when the store has been cleared successfully and rejects otherwise.",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "EphemeralStore",
            "module": "ember-simple-auth/session-stores/ephemeral"
        },
        {
            "file": "addon/session-stores/local-storage.js",
            "line": 31,
            "description": "The `localStorage` key the store persists data in.",
            "itemtype": "property",
            "name": "key",
            "type": "String",
            "default": "'ember_simple_auth-session'",
            "access": "public",
            "tagname": "",
            "class": "LocalStorageStore",
            "module": "ember-simple-auth/session-stores/local-storage"
        },
        {
            "file": "addon/session-stores/local-storage.js",
            "line": 56,
            "description": "Persists the `data` in the `localStorage`.",
            "itemtype": "method",
            "name": "persist",
            "params": [
                {
                    "name": "data",
                    "description": "The data to persist",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that resolves when the data has successfully been persisted and rejects otherwise.",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "LocalStorageStore",
            "module": "ember-simple-auth/session-stores/local-storage"
        },
        {
            "file": "addon/session-stores/local-storage.js",
            "line": 72,
            "description": "Returns all data currently stored in the `localStorage` as a plain object.",
            "itemtype": "method",
            "name": "restore",
            "return": {
                "description": "A promise that resolves with the data currently persisted in the store when the data has been restored successfully and rejects otherwise.",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "LocalStorageStore",
            "module": "ember-simple-auth/session-stores/local-storage"
        },
        {
            "file": "addon/session-stores/local-storage.js",
            "line": 85,
            "description": "Clears the store by deleting the\n{{#crossLink \"LocalStorageStore/key:property\"}}{{/crossLink}} from\n`localStorage`.",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "A promise that resolves when the store has been cleared successfully and rejects otherwise.",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "LocalStorageStore",
            "module": "ember-simple-auth/session-stores/local-storage"
        },
        {
            "file": "addon/session-stores/session-storage.js",
            "line": 27,
            "description": "The `sessionStorage` key the store persists data in.",
            "itemtype": "property",
            "name": "key",
            "type": "String",
            "default": "'ember_simple_auth-session'",
            "access": "public",
            "tagname": "",
            "class": "SessionStorageStore",
            "module": "ember-simple-auth/session-stores/session-storage"
        },
        {
            "file": "addon/session-stores/session-storage.js",
            "line": 51,
            "description": "Persists the `data` in the `sessionStorage`.",
            "itemtype": "method",
            "name": "persist",
            "params": [
                {
                    "name": "data",
                    "description": "The data to persist",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that resolves when the data has successfully been persisted and rejects otherwise.",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "SessionStorageStore",
            "module": "ember-simple-auth/session-stores/session-storage"
        },
        {
            "file": "addon/session-stores/session-storage.js",
            "line": 67,
            "description": "Returns all data currently stored in the `sessionStorage` as a plain object.",
            "itemtype": "method",
            "name": "restore",
            "return": {
                "description": "A promise that resolves with the data currently persisted in the store when the data has been restored successfully and rejects otherwise.",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "SessionStorageStore",
            "module": "ember-simple-auth/session-stores/session-storage"
        },
        {
            "file": "addon/session-stores/session-storage.js",
            "line": 80,
            "description": "Clears the store by deleting the\n{{#crossLink \"sessionStorageStore/key:property\"}}{{/crossLink}} from\n`sessionStorage`.",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "A promise that resolves when the store has been cleared successfully and rejects otherwise.",
                "type": "Ember.RSVP.Promise"
            },
            "access": "public",
            "tagname": "",
            "class": "SessionStorageStore",
            "module": "ember-simple-auth/session-stores/session-storage"
        },
        {
            "file": "addon/utils/is-fastboot.js",
            "line": 9,
            "return": {
                "description": "",
                "type": "ComputedProperty<boolean>"
            },
            "class": "Configuration",
            "module": "ember-simple-auth/session-stores/session-storage"
        },
        {
            "file": "addon/utils/is-fastboot.js",
            "line": 18,
            "params": [
                {
                    "name": "owner",
                    "description": "",
                    "type": "ApplicationInstance"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Configuration",
            "module": "ember-simple-auth/session-stores/session-storage"
        },
        {
            "file": "addon/configuration.js",
            "line": 21,
            "description": "The root URL of the application as configured in `config/environment.js`.",
            "itemtype": "property",
            "name": "rootURL",
            "readonly": "",
            "static": 1,
            "type": "String",
            "default": "''",
            "access": "public",
            "tagname": "",
            "class": "Configuration",
            "module": "ember-simple-auth/configuration"
        },
        {
            "file": "addon/configuration.js",
            "line": 33,
            "description": "The base URL of the application as configured in `config/environment.js`.",
            "itemtype": "property",
            "name": "baseURL",
            "readonly": "",
            "static": 1,
            "type": "String",
            "default": "''",
            "access": "public",
            "tagname": "",
            "class": "Configuration",
            "module": "ember-simple-auth/configuration"
        },
        {
            "file": "addon/configuration.js",
            "line": 51,
            "description": "The route to transition to for authentication. The\n{{#crossLink \"AuthenticatedRouteMixin\"}}{{/crossLink}} will transition to\nthis route when a route that implements the mixin is accessed when the\nroute is not authenticated.",
            "itemtype": "property",
            "name": "authenticationRoute",
            "deprecated": true,
            "deprecationMessage": "AuthenticatedRouteMixin/authenticationRoute:property",
            "readonly": "",
            "static": 1,
            "type": "String",
            "default": "'login'",
            "access": "public",
            "tagname": "",
            "class": "Configuration",
            "module": "ember-simple-auth/configuration"
        },
        {
            "file": "addon/configuration.js",
            "line": 67,
            "description": "The route to transition to after successful authentication.",
            "itemtype": "property",
            "name": "routeAfterAuthentication",
            "deprecated": true,
            "deprecationMessage": "ApplicationRouteMixin/routeAfterAuthentication:property",
            "readonly": "",
            "static": 1,
            "type": "String",
            "default": "'index'",
            "access": "public",
            "tagname": "",
            "class": "Configuration",
            "module": "ember-simple-auth/configuration"
        },
        {
            "file": "addon/configuration.js",
            "line": 80,
            "description": "The route to transition to if a route that implements the\n{{#crossLink \"UnauthenticatedRouteMixin\"}}{{/crossLink}} is accessed when\nthe session is authenticated.",
            "itemtype": "property",
            "name": "routeIfAlreadyAuthenticated",
            "deprecated": true,
            "deprecationMessage": "UnauthenticatedRouteMixin/routeIfAlreadyAuthenticated:property",
            "readonly": "",
            "static": 1,
            "type": "String",
            "default": "'index'",
            "access": "public",
            "tagname": "",
            "class": "Configuration",
            "module": "ember-simple-auth/configuration"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nIf the user is unauthenticated, invoke `callback`",
            "line": " addon/mixins/authenticated-route-mixin.js:9"
        },
        {
            "message": "Missing item type",
            "line": " addon/mixins/unauthenticated-route-mixin.js:9"
        },
        {
            "message": "Missing item type",
            "line": " addon/utils/is-fastboot.js:9"
        },
        {
            "message": "Missing item type",
            "line": " addon/utils/is-fastboot.js:18"
        }
    ]
}